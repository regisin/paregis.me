<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tutorial on paregis.me</title><link>/categories/tutorial/</link><description>Recent content in Tutorial on paregis.me</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>All rights preserved.</copyright><lastBuildDate>Mon, 25 Jul 2022 00:00:01 -0500</lastBuildDate><atom:link href="/categories/tutorial/index.xml" rel="self" type="application/rss+xml"/><item><title>FastAPI for frontend development with hot reload</title><link>/posts/fastapi-frontend-development/</link><pubDate>Mon, 25 Jul 2022 00:00:01 -0500</pubDate><guid>/posts/fastapi-frontend-development/</guid><description>TL;DR: In this post, I will be implementing a hot reload mechanism do I can use FastAPI for both front and backend development. Example code repo here.
Introduction I&amp;rsquo;m a big fa of some frameworks out there. I like Svelte and sveltekit, I&amp;rsquo;ve used Strapi for this website&amp;rsquo;s backend for a couple of years, now I&amp;rsquo;m using Hugo to simplify my workflow. I have also been tinkering with FastAPI, yet another framework, this time for backend.</description><content>&lt;p>&lt;strong>TL;DR&lt;/strong>: In this post, I will be implementing a hot reload mechanism do I can use FastAPI for both front and backend development. Example code &lt;a href="https://github.com/regisin/fastapi-hmr">repo here&lt;/a>.&lt;/p>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>I&amp;rsquo;m a big fa of some frameworks out there. I like Svelte and &lt;a href="https://kit.svelte.dev/">sveltekit&lt;/a>, I&amp;rsquo;ve used &lt;a href="https://strapi.io/">Strapi&lt;/a> for this website&amp;rsquo;s backend for a couple of years, now I&amp;rsquo;m using Hugo to simplify my workflow. I have also been tinkering with &lt;a href="https://fastapi.tiangolo.com/">FastAPI&lt;/a>, yet another framework, this time for backend. Each and every one of those have a purpose and try to solve some sort of problem.&lt;/p>
&lt;p>While they do what they are meant to be, for me personally, the amount of different techs in a stack can get overwhelming. Yes I like using sveltekit for my frontend. Yes I like having a nice CMS in the backend. But sometimes all of these get in the way of being productive and prevent me from actually putting ideas to practice! That&amp;rsquo;s what I&amp;rsquo;m trying to fix, little by little.&lt;/p>
&lt;p>The web, the http protocol specifically, is basically the same as it was back i the day. It trasfers text files from a server (backend) to the client (browser). Those files are then interpreted by the client and displayed on the screen. All of that to say that I don&amp;rsquo;t need a fancy frontend framework such as React/Vue/(Thor forbid)Angular/Svelte&amp;hellip; I can just generate html files and send them back to the client! The client doesn&amp;rsquo;t even need to do a single API call, just display the html. That&amp;rsquo;s one of the reasons I will be using FastAPI. The main goal is to develop an entire website using a minimal stack. If I can do it all using python, awesome!&lt;/p>
&lt;p>&lt;em>Gosh, that&amp;rsquo;s a long text that could&amp;rsquo;ve stayed in my private notes or a journal. I got my eyes on you, pyscript!&lt;/em>&lt;/p>
&lt;p>In short, FastAPI is a python framework that makes it easy to implement web APIs. It&amp;rsquo;s documentation (I think it&amp;rsquo;s more of a guided tutorial) is fantastic. I can&amp;rsquo;t possibly cover all of it, you should check it out if you&amp;rsquo;re not familiar with it but are still reading this text. :)&lt;/p>
&lt;p>While FastAPI is great for what it does, it is NOT a frontend stack. However, it does support a very cool templating engine, &lt;a href="https://jinja.palletsprojects.com/en/3.1.x/">Jinja2&lt;/a>. With jinja I can essentially create a bunch of html templates, load it in python using FaspAPI, and inject data into it. The templates then form a valid html file that can be sent back to the client that made a request to the FastAPI backend.&lt;/p>
&lt;p>One issue though, and perhaps something that we take for granted when we start developing a web app in a modern framework, is that while we develop and hit &lt;em>save&lt;/em>, our browser automatically updates with the new changes. That&amp;rsquo;s not really the case with FastAPI+Jinja. While FastAPI does have a &lt;em>reload&lt;/em> option (if you&amp;rsquo;re using uvicorn), it does NOT automatically refresh the browser tab that you have opened automatically! This behavior is called hot reload, or hot module reload, or something similar. It might not be a problem at first, but again, we kind of take if for granted with modern frameworks.&lt;/p>
&lt;h2 id="solution-design">Solution design&lt;/h2>
&lt;p>I&amp;rsquo;m not reinventing the wheel here. In fact, the solution already exists, just no one wrote a blog that uses FastAPI. I found the solution at &lt;a href="https://www.bscotch.net/post/create-a-live-reload-server">Create a live-reload server for front-end development&lt;/a>, where the backend is using NodeJS.&lt;/p>
&lt;p>The idea is pretty straight forward: the dev web server, whiule running, listens to WebSocket on a specific endpoint. The client, when loaded by the browser, will connect to that WS endpoint (using some minimal JavaScript). When the server reloads, it will close all conections. The client, when detecting that a WS connection was lost, will try to reconnect for a few times: if it reconnects, means the server reloaded successfully, if not, time out after a a few tries. If the connection is reestablished, then the JavaScript in the client will trigger a page reload (same as you hitting F5 after every update to the server).&lt;/p>
&lt;pre>&lt;code>&amp;gt; Note: this thing is only for development purposes. I would remove it from production!
&lt;/code>&lt;/pre>
&lt;p>Enough talking!&lt;/p>
&lt;h2 id="morphcoding-time">Morph(Cod)ing time&lt;/h2>
&lt;p>I can&amp;rsquo;t do a better job at teaching you about FastAPI than &lt;a href="fastapi.tiangolo.com/">its official documentation&lt;/a>. I&amp;rsquo;m using &lt;code>3.10&lt;/code>, but it could work with &lt;code>3.6&lt;/code> depending which FastAPI version you use. I&amp;rsquo;m also doing this on a macOS, so adapt the commands accordingly.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>New project, I like to use &lt;a href="https://docs.python.org/3/tutorial/venv.html">Virtual Environments&lt;/a> for each new python project.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>~ % mkdir potato
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~ % cd potato
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>potato % python3.10 -m venv env
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>potato % source env/bin/activate
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">(&lt;/span>env&lt;span style="color:#f92672">)&lt;/span> potato %
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Notice the &lt;code>(env)&lt;/code> in front of the command line, that&amp;rsquo;s how you know you are in the virtual environment.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Install dependencies. This will all exist only in this folder because we are using &lt;code>venv&lt;/code>. &lt;code>Jinja2&lt;/code> is included if you install &lt;code>fastapi[all]&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">(&lt;/span>env&lt;span style="color:#f92672">)&lt;/span> potato % pip install &lt;span style="color:#e6db74">&amp;#34;fastapi[all]&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Create the FastAPI app, mine is in &lt;code>main.py&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> fastapi &lt;span style="color:#f92672">import&lt;/span> FastAPI, Request, WebSocket, WebSocketDisconnect
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> fastapi.responses &lt;span style="color:#f92672">import&lt;/span> HTMLResponse
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> fastapi.templating &lt;span style="color:#f92672">import&lt;/span> Jinja2Templates
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> utils &lt;span style="color:#f92672">import&lt;/span> reloader
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>templates &lt;span style="color:#f92672">=&lt;/span> Jinja2Templates(directory&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;templates&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app &lt;span style="color:#f92672">=&lt;/span> FastAPI(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> title&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;Potato&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> openapi_url&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">None&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> docs_url&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">None&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> redoc_url&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">None&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@app&lt;/span>&lt;span style="color:#f92672">.&lt;/span>get(&lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>, status_code&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">200&lt;/span>, response_class&lt;span style="color:#f92672">=&lt;/span>HTMLResponse)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">home&lt;/span>(request: Request):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> views&lt;span style="color:#f92672">.&lt;/span>TemplateResponse(&lt;span style="color:#e6db74">&amp;#39;Home.html&amp;#39;&lt;/span>, {&lt;span style="color:#e6db74">&amp;#34;request&amp;#34;&lt;/span>: request,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;reloader&amp;#34;&lt;/span>: reloader,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;title&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Tomato&amp;#34;&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@app&lt;/span>&lt;span style="color:#f92672">.&lt;/span>websocket(&lt;span style="color:#e6db74">&amp;#34;/ws&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">async&lt;/span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">websocket_endpoint&lt;/span>(websocket: WebSocket):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">await&lt;/span> websocket&lt;span style="color:#f92672">.&lt;/span>accept()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> websocket&lt;span style="color:#f92672">.&lt;/span>receive_text()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">except&lt;/span> WebSocketDisconnect:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">pass&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The app has two endpoints:&lt;/p>
&lt;ul>
&lt;li>&lt;code>/&lt;/code>: which in this case will return a populated jinja template. This will be accessed through &lt;code>http://localhost:8000/&lt;/code>&lt;/li>
&lt;li>&lt;code>/ws&lt;/code>: the websocket that will restart everytime the server reloads. It&amp;rsquo;s endpoint is &lt;code>ws://localhost:8000/ws&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p>The home endpoint &lt;code>/&lt;/code> will read a template from the server (in the &lt;code>/templates&lt;/code> directory, we will get to the template itself next), pass a couple of data to it (the &lt;code>title&lt;/code> and &lt;code>reloader&lt;/code>, more on the reloader later), and return the final html back to the client when requested.&lt;/p>
&lt;p>The WS endpoint has no real use except to exists! It doesn&amp;rsquo;t transfer any sort of data, it reeally is just so the client is able to notice when the server reloads (aka WS connection is lost). We are also cathing (excepting) the &lt;code>WebSocketDisconnect&lt;/code> because if not, everytime we reload the server, the terminal that is running will be polluted with a trace stack.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Create the Jinja template in the &lt;code>templates&lt;/code> directory:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mkdir templates
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>touch templates/Home.html
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now open the &lt;code>templates/Home.html&lt;/code> and add the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">html&lt;/span> &lt;span style="color:#a6e22e">lang&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;en&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">title&lt;/span>&amp;gt;{{ title }}&amp;lt;/&lt;span style="color:#f92672">title&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;Tomatoes are fun!&amp;lt;/&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{ reloader|safe }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is a Jinja template. The &lt;code>{{ title }}&lt;/code> will be replaced by the parameters we pass with the FastAPI app from before:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">return&lt;/span> views&lt;span style="color:#f92672">.&lt;/span>TemplateResponse(&lt;span style="color:#e6db74">&amp;#39;Home.html&amp;#39;&lt;/span>, {&lt;span style="color:#e6db74">&amp;#34;request&amp;#34;&lt;/span>: request,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;reloader&amp;#34;&lt;/span>: reloader,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;title&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Potato&amp;#34;&lt;/span>})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Same with the &lt;code>{{ reloader|safe }}&lt;/code>, but this will be a JavaScript snippet that we still need to implement. &lt;code>safe&lt;/code> here is to tell jinja that this variable is safe to render. Which it is, but you woulkdn&amp;rsquo;t if you didn&amp;rsquo;t know what was the contents of &lt;code>reloader&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &lt;code>reloader&lt;/code> script:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">socketUrl&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;ws://localhost:8000/ws&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">ws&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">WebSocket&lt;/span>(&lt;span style="color:#a6e22e">socketUrl&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * Hot Module Reload
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ws&lt;/span>.&lt;span style="color:#a6e22e">addEventListener&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;close&amp;#39;&lt;/span>,() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">interAttemptTimeoutMilliseconds&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">maxAttempts&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">attempts&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">reloadIfCanConnect&lt;/span> &lt;span style="color:#f92672">=&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">attempts&lt;/span>&lt;span style="color:#f92672">++&lt;/span> ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">attempts&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">maxAttempts&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">error&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;[WS:error]&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;HMR could not reconnect to dev server.&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">socket&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">WebSocket&lt;/span>(&lt;span style="color:#a6e22e">socketUrl&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">socket&lt;/span>.&lt;span style="color:#a6e22e">addEventListener&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;error&amp;#39;&lt;/span>,()=&amp;gt;{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">setTimeout&lt;/span>(&lt;span style="color:#a6e22e">reloadIfCanConnect&lt;/span>,&lt;span style="color:#a6e22e">interAttemptTimeoutMilliseconds&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">socket&lt;/span>.&lt;span style="color:#a6e22e">addEventListener&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;open&amp;#39;&lt;/span>,() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">location&lt;/span>.&lt;span style="color:#a6e22e">reload&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">reloadIfCanConnect&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This snippet is modified from &lt;a href="https://www.bscotch.net/post/create-a-live-reload-server">Create a live-reload server for front-end development&lt;/a>. This will be injected in our html template before sending it to the browser.&lt;/p>
&lt;p>Once the browser receives the html with that script, it will execute that self calling function. It will open a websocket connection to our websocket endpoint. When the connection closes, it will wait a few (&lt;code>100&lt;/code>) millisecconds and try to reconnect. Repeat up to &lt;code>5&lt;/code> times. If reconnected successfully, refresh the page with &lt;code>location.reload()&lt;/code>, aka &amp;ldquo;hot&amp;rdquo; reload the page.&lt;/p>
&lt;p>To make things easier, wrap that in a python string. Mine is in &lt;code>utils.py&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>reloader &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;lt;script&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">(() =&amp;gt; {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> const socketUrl = &amp;#34;ws://localhost:8000/ws&amp;#34;;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> /* ... rest of code here */
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;lt;/script&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>So I can import in my FastAPI app (&lt;code>from utils import reloader&lt;/code>).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>One last thing. Before you start the uvicorn server again, we need to tell it to watch for changes in &lt;code>.html&lt;/code> files. By default it will only reload when it detects changes in &lt;code>.py&lt;/code> files. It&amp;rsquo;s an easy fix though, simply add a flag to the command line like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">(&lt;/span>env&lt;span style="color:#f92672">)&lt;/span> potato % uvicorn main:app --reload --reload-include &lt;span style="color:#e6db74">&amp;#39;*.html&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>That&amp;rsquo;s it! Now with the development server running, head on to your browser &lt;code>http://localhost:8000/&lt;/code>, and try saving some change to the source files. For example:&lt;/p>
&lt;ul>
&lt;li>Change the prop in the &lt;code>main.py&lt;/code>: from &lt;code>&amp;quot;title&amp;quot;:&amp;quot;Tomato&amp;quot;&lt;/code> to &lt;code>&amp;quot;title&amp;quot;:&amp;quot;Potato&amp;quot;&lt;/code>.&lt;/li>
&lt;li>Change the &lt;code>templates/Home.html&lt;/code> template: from &lt;code>&amp;lt;h1&amp;gt;Tomatoes are fun!&amp;lt;/h1&amp;gt;&lt;/code> to &lt;code>&amp;lt;h1&amp;gt;Potatoes are fun!&amp;lt;/h1&amp;gt;&lt;/code>.&lt;/li>
&lt;/ul>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>This is a very rudimentary hot module reload, and should only be used in dev, not in production. There&amp;rsquo;s no complex state management on the frontend, in which case you should move to a mature frontend framework like React.&lt;/p>
&lt;p>All in all, this thing really helps me test out changes in html using only python.&lt;/p></content></item><item><title>Building and Hosting a Static Website for Free on Github</title><link>/posts/building-and-hosting-a-static-website-for-free-on-github/</link><pubDate>Thu, 09 Dec 2021 00:00:01 -0500</pubDate><guid>/posts/building-and-hosting-a-static-website-for-free-on-github/</guid><description>Table of Content Building and hosting a static website for free on GitHub Recap Set up the GitHub.com account Create the account Create the website repository Uploading the new repository Cleaning up the repo with .gitignore A little more about branches and GitHub Pages Deploying by hand Deploy automatically with GitHub Actions Summary Recap We&amp;rsquo;ve been working on creating a static website using python with Jinja2. At this point we have a simple website with a couple of pages.</description><content>&lt;h2 id="table-of-content">Table of Content&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="#building-and-hosting-a-static-website-for-free-on-github">Building and hosting a static website for free on GitHub&lt;/a>&lt;/li>
&lt;li>&lt;a href="#recap">Recap&lt;/a>&lt;/li>
&lt;li>&lt;a href="#set-up-the-githubcom-account">Set up the GitHub.com account&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#create-the-account">Create the account&lt;/a>&lt;/li>
&lt;li>&lt;a href="#create-the-website-repository">Create the website repository&lt;/a>&lt;/li>
&lt;li>&lt;a href="#uploading-the-new-repository">Uploading the new repository&lt;/a>&lt;/li>
&lt;li>&lt;a href="#cleaning-up-the-repo-with-gitignore">Cleaning up the repo with &lt;code>.gitignore&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#a-little-more-about-branches-and-github-pages">A little more about branches and GitHub Pages&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#deploying-by-hand">Deploying by hand&lt;/a>&lt;/li>
&lt;li>&lt;a href="#deploy-automatically-with-github-actions">Deploy automatically with GitHub Actions&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#summary">Summary&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="recap">Recap&lt;/h2>
&lt;p>We&amp;rsquo;ve been working on creating a static website using &lt;code>python&lt;/code> with &lt;code>Jinja2&lt;/code>. At this point we have a simple website with a couple of pages. The main take away so far is the workflow. Sure, you learned and saw an example of how to use the Jinja templates, and how to serve the website &lt;strong>locally&lt;/strong> so you can check it out using your browser. But the workflow for creating new pages, new sub pages, that&amp;rsquo;s not going to change. If you want to create 1, 2, 3, 10 new sub-pages on your site, you already have a step-by-step flow of how to do for one, all you need is to repeat the procedure (the order might be different for you, but essentially this is what we&amp;rsquo;ve been doing):&lt;/p>
&lt;ol>
&lt;li>Create a new template for the page in the &lt;code>/templates&lt;/code> folder&lt;/li>
&lt;li>Add the data to the &lt;code>data.py&lt;/code>&lt;/li>
&lt;li>Load template and data brom the &lt;code>build.py&lt;/code> script, combine them and output to the &lt;code>/_site&lt;/code> build folder&lt;/li>
&lt;li>Serve the &lt;code>/_site&lt;/code> folder and open &lt;code>localhost:8000&lt;/code> in the browser to check it out&lt;/li>
&lt;/ol>
&lt;p>So there&amp;rsquo;s not much more about that. You might be able to master the Jinja template engine, make your static website prettier by changing the files that you already have, experiment with different fonts and CSS styles&amp;hellip; What is missing, though, is having the website available on the Internet for anyone in the world to see!&lt;/p>
&lt;p>In this post, I will show one way that you can host a website for free. And I&amp;rsquo;ll use &lt;code>GitHub.com&lt;/code> for that. So we are not going to be writing much code in this video, but we&amp;rsquo;ll set up a GitHub account to build and host the website. It will be a somewhat long post.&lt;/p>
&lt;h2 id="set-up-the-githubcom-account">Set up the GitHub.com account&lt;/h2>
&lt;h3 id="create-the-account">Create the account&lt;/h3>
&lt;p>If you haven&amp;rsquo;t yet, head over to &lt;a href="https://github.com">GitHub&lt;/a> and create an account. It&amp;rsquo;s free, and if you are a student you can have a bunch of goodies like free Pro services.&lt;/p>
&lt;p>After creating the account, you will have a dedicated link: &lt;code>https://github.com/&amp;lt;your username&amp;gt;&lt;/code>. This page will list all of the GitHub &lt;em>repositories&lt;/em> that you work with. Repositories (repos for short) are essentially all the different coding projects that you have. GitHub is a place where you can store your projects online. I won&amp;rsquo;t get into much details about &lt;code>git&lt;/code> and &lt;code>GitHub&lt;/code>, in a nutshell GitHub is a website that you can store your &lt;code>git&lt;/code> projects, and &lt;code>git&lt;/code> is a tool that helps developer to keep track of changes in source-code. &lt;code>git&lt;/code> is used locally, in your machine, and GitHub is the website that you can save these projects to. So if you loose your computer, for example, your projects will still be available online.&lt;/p>
&lt;h3 id="create-the-website-repository">Create the website repository&lt;/h3>
&lt;p>GitHub has this very cool feature that let&amp;rsquo;s you host webpages for free, and we will use it here. In your account, go ahead and create a new repo:&lt;/p>
&lt;p>
&lt;p>
&lt;picture>
&lt;source media="(max-width: 376px)"
srcset="">
&lt;source media="(max-width: 992px)"
srcset="">
&lt;source media="(max-width: 1400px)"
srcset="">
&lt;source media="(min-width: 1600px)"
srcset="">
&lt;img alt="New repository" title="New repository" src="images/Screen_Shot_2021_12_09_at_11_11_14_401b895d8d.png">
&lt;/picture>
&lt;/p>
&lt;/p>
&lt;p>The name of the repository is very important in this particular case. We need to name the repository as &lt;code>&amp;lt;your username&amp;gt;.github.io&lt;/code>. Normally you can choose whatever name you&amp;rsquo;d like, but to be able to have our own website we need to follow that pattern. This repository will be the link to our website when we finish: &lt;code>https://&amp;lt;your username&amp;gt;.github.io&lt;/code>.&lt;/p>
&lt;p>
&lt;p>
&lt;picture>
&lt;source media="(max-width: 376px)"
srcset="">
&lt;source media="(max-width: 992px)"
srcset="">
&lt;source media="(max-width: 1400px)"
srcset="">
&lt;source media="(min-width: 1600px)"
srcset="">
&lt;img alt="Naming new repository" title="Naming new repository" src="images/Screen_Shot_2021_12_09_at_11_11_41_4cfad89bbc.png">
&lt;/picture>
&lt;/p>
&lt;/p>
&lt;h3 id="uploading-the-new-repository">Uploading the new repository&lt;/h3>
&lt;p>After creating the repo, it will be empty by default, and we need to upload our files to it. There are different ways to do it as you can see:&lt;/p>
&lt;p>
&lt;p>
&lt;picture>
&lt;source media="(max-width: 376px)"
srcset="">
&lt;source media="(max-width: 992px)"
srcset="">
&lt;source media="(max-width: 1400px)"
srcset="">
&lt;source media="(min-width: 1600px)"
srcset="/posts/building-and-hosting-a-static-website-for-free-on-github/images/Screen_Shot_2021_12_09_at_11_13_02_0e2447f0be_huef304e05f4fb2de2b34da8a24a27e40f_75984_500x0_resize_box_3.png">
&lt;img alt="Repository created" title="Repository created" src="images/Screen_Shot_2021_12_09_at_11_13_02_0e2447f0be.png">
&lt;/picture>
&lt;/p>
&lt;/p>
&lt;p>I&amp;rsquo;ll be using the first option with a little teak. First, I need to install &lt;code>git&lt;/code> on my computer. I won&amp;rsquo;t explain how to do that because it can vary from different operating systems. You can google &lt;code>how to install git&lt;/code> and I&amp;rsquo;m sure plenty of results will show up. At the end of it, we need to be able to use the &lt;code>git&lt;/code> command from our bash terminal. So let&amp;rsquo;s open up the terminal and &lt;code>cd&lt;/code> into the project folder:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cd /path/to/project/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#e6db74">&amp;#34;# My static website&amp;#34;&lt;/span> &amp;gt;&amp;gt; README.md
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git init
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git add .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git commit -m &lt;span style="color:#e6db74">&amp;#34;first commit&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git branch -M main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git remote add origin https://github.com/&amp;lt;your username&amp;gt;/&amp;lt;your username&amp;gt;.github.io
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>echo&lt;/code> command will just create a text file named &lt;code>README.md&lt;/code> and write &lt;code># My static website&lt;/code> on it, GitHub recommends every repository to have a read-me file so that&amp;rsquo;s what I did. Then we just follow the instructions, the only difference is that I use &lt;code>git add .&lt;/code> instead of &lt;code>git add README.md&lt;/code>, and that&amp;rsquo;s because our project already has several files that we created, and not just the &amp;ldquo;read me&amp;rdquo;, so we add all files to the repo that way. The rest of the commands will commit the code to the local repo (which is kind of a checkpoint, saving your progress). Then it will name a &lt;code>branch&lt;/code> &lt;em>main&lt;/em> (a branch is kind of a version of your project and &lt;code>main&lt;/code> being, well, the most important one) branches are hard to explain, you might be better off by googling about it if you want. We then map the local repo just created to the remote one, the one we created using GitHub. Lastly, we &lt;code>push&lt;/code> the code from the commit to the remote repo!&lt;/p>
&lt;p>After the &lt;code>git push&lt;/code> runs successfully, you can go to the GitHub page (&lt;code>https://github.com/&amp;lt;your username&amp;gt;/&amp;lt;your username&amp;gt;.github.io&lt;/code>) and refresh it and you should now see all your project files there:&lt;/p>
&lt;p>
&lt;p>
&lt;picture>
&lt;source media="(max-width: 376px)"
srcset="">
&lt;source media="(max-width: 992px)"
srcset="">
&lt;source media="(max-width: 1400px)"
srcset="">
&lt;source media="(min-width: 1600px)"
srcset="/posts/building-and-hosting-a-static-website-for-free-on-github/images/Screen_Shot_2021_12_09_at_11_53_12_c6569e6323_hu499829b7b57f1a284a79b72124e51624_38650_500x0_resize_box_3.png">
&lt;img alt="First commit" title="First commit" src="images/Screen_Shot_2021_12_09_at_11_53_12_c6569e6323.png">
&lt;/picture>
&lt;/p>
&lt;/p>
&lt;h3 id="cleaning-up-the-repo-with-gitignore">Cleaning up the repo with &lt;code>.gitignore&lt;/code>&lt;/h3>
&lt;p>If you notice there&amp;rsquo;s a bunch of &amp;ldquo;junk&amp;rdquo; files in the repository:&lt;/p>
&lt;ol>
&lt;li>A &lt;code>__pycache__&lt;/code> folder that python creates when it builds the website&lt;/li>
&lt;li>The &lt;code>DS_Store&lt;/code> which is from my mac laptop that creates it automatically&lt;/li>
&lt;li>And there&amp;rsquo;s the &lt;code>_site&lt;/code> folder, which is important, but as we see later, won&amp;rsquo;t belong here&lt;/li>
&lt;/ol>
&lt;p>Luckily, it&amp;rsquo;s an easy fix. In the project folder, create a file named &lt;code>.gitignore&lt;/code> and add the following lines:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span>__pycache__/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.DS_Store
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*.pyc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*.pyo
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For learning purposes, I will include &lt;code>_site/&lt;/code> later to this list. This file is special because it tells &lt;code>git&lt;/code> to, well, &lt;em>ignore&lt;/em> files and folders listed in it. Now we can upload this to GitHub and the repo will now ignore those files:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cd /path/to/project/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git rm -rf --cached .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git add .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git commit -m &lt;span style="color:#e6db74">&amp;#34;Added gitignore&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git push -u origin main
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Because originally I didn&amp;rsquo;t exclude the files and actually committed and pushed them to the repo (I didn&amp;rsquo;t have &lt;code>.gitignore&lt;/code> yet), I have to first remove all the files from the repo. Then I add all the files again with &lt;code>git add .&lt;/code>, this time respecting the &lt;code>.gitignore&lt;/code> rules, and finally create a new commit and push to GitHub. Now the repository does not list those junk files anymore.&lt;/p>
&lt;p>
&lt;p>
&lt;picture>
&lt;source media="(max-width: 376px)"
srcset="">
&lt;source media="(max-width: 992px)"
srcset="">
&lt;source media="(max-width: 1400px)"
srcset="">
&lt;source media="(min-width: 1600px)"
srcset="">
&lt;img alt="Add .gitignore file" title="Add .gitignore file" src="images/Screen_Shot_2021_12_09_at_13_48_02_85494b771c.png">
&lt;/picture>
&lt;/p>
&lt;/p>
&lt;p>&lt;em>Note: &amp;ldquo;committing&amp;rdquo; and &amp;ldquo;pushing&amp;rdquo; is something you will do quite often for even a single project, don&amp;rsquo;t be afraid of committing frequently to the same repository.&lt;/em>&lt;/p>
&lt;h2 id="a-little-more-about-branches-and-github-pages">A little more about branches and GitHub Pages&lt;/h2>
&lt;p>I know I know, I said you&amp;rsquo;re better off googling what branches are than learning from me. Still true! Branches are a big topic, and if you end up using &lt;code>git&lt;/code> and GitHub professionally, working on teams, you will learn that it can be used in different ways. For our use case we can thing of branches being completely different repositories (or sub-repositories if you will): one for source code (development), one for built code (production).&lt;/p>
&lt;p>We already have one branch in our repository, the &lt;code>main&lt;/code> branch. That&amp;rsquo;s where all the source code will be. The template files, the build script, the data file&amp;hellip; these are all part of the source-code of the website. The production branch will be named something different, and will contain only the production files, the ready-to-serve &lt;code>html&lt;/code> files.. all the files in the &lt;code>/_site&lt;/code> build folder will be in that (unnamed) branch.&lt;/p>
&lt;p>The production branch will be named &lt;code>gh-pages&lt;/code>, which is short for &lt;em>GitHub Pages&lt;/em>. GitHub Pages is, well, a github thing. Each repository that you create you can create a GitHub Page for it. The way it works is quite simple: you configure your repository to enable GitHub Pages, then you select which branch of the repo will have the files for the pages.&lt;/p>
&lt;p>The &lt;code>&amp;lt;your username&amp;gt;.github.io&lt;/code> repo is special, that&amp;rsquo;s the place you can showoff all of your projects, all of your repos. Each repo can also have its own pages set up, which will make &lt;code>&amp;lt;your username&amp;gt;.github.io/&amp;lt;your awesome repo&amp;gt;&lt;/code> page be available! We won&amp;rsquo;t go that far in this post, though. We will only work with the &lt;code>&amp;lt;username&amp;gt;.github.io&lt;/code> repository.&lt;/p>
&lt;p>We still have to create this second branch though, the &lt;code>gh-pages&lt;/code> branch. It&amp;rsquo;s quite simple: head to the repository website on your browser &lt;code>https://github.com/&amp;lt;your username&amp;gt;/&amp;lt;your username&amp;gt;.github.io/&lt;/code>, then click on the branches drop-down button and create the branch right there:&lt;/p>
&lt;p>
&lt;p>
&lt;picture>
&lt;source media="(max-width: 376px)"
srcset="">
&lt;source media="(max-width: 992px)"
srcset="">
&lt;source media="(max-width: 1400px)"
srcset="">
&lt;source media="(min-width: 1600px)"
srcset="">
&lt;img alt="New gh-pages branch" title="New gh-pages branch" src="images/Screen_Shot_2021_12_09_at_13_37_19_1f3be06272.png">
&lt;/picture>
&lt;/p>
&lt;/p>
&lt;p>Now we can go to the repository settings, and tell that the website should be pointing to the &lt;code>gh-pages&lt;/code> branch and not &lt;code>main&lt;/code>. Settings &amp;gt; Pages:&lt;/p>
&lt;p>
&lt;p>
&lt;picture>
&lt;source media="(max-width: 376px)"
srcset="">
&lt;source media="(max-width: 992px)"
srcset="">
&lt;source media="(max-width: 1400px)"
srcset="">
&lt;source media="(min-width: 1600px)"
srcset="">
&lt;img alt="Repository settings" title="Repository settings" src="images/Screen_Shot_2021_12_09_at_14_02_20_69cbcfacb6.png">
&lt;/picture>
&lt;/p>
&lt;p>
&lt;picture>
&lt;source media="(max-width: 376px)"
srcset="">
&lt;source media="(max-width: 992px)"
srcset="">
&lt;source media="(max-width: 1400px)"
srcset="">
&lt;source media="(min-width: 1600px)"
srcset="/posts/building-and-hosting-a-static-website-for-free-on-github/images/Screen_Shot_2021_12_09_at_14_02_42_ff85a36167_hub15d3b947c5927301399fd479b429575_81503_500x0_resize_box_3.png">
&lt;img alt="Pages settings" title="Pages settings" src="images/Screen_Shot_2021_12_09_at_14_02_42_ff85a36167.png">
&lt;/picture>
&lt;/p>
&lt;p>
&lt;picture>
&lt;source media="(max-width: 376px)"
srcset="">
&lt;source media="(max-width: 992px)"
srcset="">
&lt;source media="(max-width: 1400px)"
srcset="">
&lt;source media="(min-width: 1600px)"
srcset="">
&lt;img alt="Select gh-pages in the pages settings" title="Select gh-pages in the pages settings" src="images/Screen_Shot_2021_12_09_at_14_02_51_862727c4e0.png">
&lt;/picture>
&lt;/p>
&lt;/p>
&lt;p>After saving it, the &lt;code>https://&amp;lt;username&amp;gt;github.io&lt;/code> website will be serving the files from the &lt;code>gh-pages&lt;/code>. Right now, nothing changed because when we created the new branch we just copied all of the files from the &lt;code>main&lt;/code> branch, which is the default behavior. What we need to do now is build the website and only upload to the &lt;code>gh-pages&lt;/code> branch the files inside the &lt;code>/_site&lt;/code> folder.&lt;/p>
&lt;h3 id="deploying-by-hand">Deploying by hand&lt;/h3>
&lt;p>&lt;em>Note: this section will have some more &lt;code>git&lt;/code> commands that at the end of the post will be irrelevant. This is deploying the hard way. If you just want you can skip to the cool and easy stuff in the next section.&lt;/em>&lt;/p>
&lt;p>So, we need to figure out how to replace the contents of the &lt;code>gh-pages&lt;/code> branch with whatever is generated by the build script in the &lt;code>/_site&lt;/code> sub-folder. First, let&amp;rsquo;s think about the workflow we need to do by hand here. For any new version of the website that needs to go to production:&lt;/p>
&lt;ol>
&lt;li>Run the build script: &lt;code>python build.py&lt;/code>&lt;/li>
&lt;li>Push the contents from &lt;code>/_site&lt;/code> to the &lt;code>gh-pages&lt;/code> branch&lt;/li>
&lt;/ol>
&lt;p>Sounds easy, right? We can do this with these commands:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cd /path/to/project/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>python build.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git add .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git commit -M &lt;span style="color:#e6db74">&amp;#34;New build&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git subtree push --prefix _site origin gh-pages
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Well, that&amp;rsquo;s neat if you ask me. But there&amp;rsquo;s a small issue, we needed to keep two copies of the built website, one in the &lt;code>main&lt;/code> branch and another in the &lt;code>gh-pages&lt;/code>. Another issue is that it can be quite annoying to do this each and every time you want to deploy your website, and sometimes you may make some mistakes on the way.. I know I have!&lt;/p>
&lt;h3 id="deploy-automatically-with-github-actions">Deploy automatically with GitHub Actions&lt;/h3>
&lt;p>We can make the deployment process automatic. To do so we can use any Continuous Deployment/Continuous Integration service out there. Originally I used to use TravisCI, but eventually it became a paid service. There are other solutions out there: CircleCI, Heroku, etc. However, the easiest one to deal with for this project by far is GitHub Actions.&lt;/p>
&lt;p>GitHub Actions is yet another sweet sweet feature that GitHub gives us for free. And since everything we are doing is already on GitHub, using Actions won&amp;rsquo;t require much effort.&lt;/p>
&lt;p>So, what is GitHub Actions you may ask. In a nutshell, it is an actions that is triggered every time certain events happen with the repository. In our case we will trigger an action every time a new &lt;code>push&lt;/code> event happens in the &lt;code>main&lt;/code> branch of the repository. So&amp;hellip; every time we push an updated version of the website to the &lt;code>main&lt;/code> branch, the GitHub Action (that we will configure next) will be executed. This action will do the deployment steps that we did by hand: build, commit and push to the &lt;code>gh-pages&lt;/code> branch.&lt;/p>
&lt;p>So, to configure the Action, all we do is create and set up a file in our project. This file will be pushed to the &lt;code>main&lt;/code> branch, and GitHub will run it on it&amp;rsquo;s servers. Go ahead and create two folders in the project folder, name it &lt;code>.github&lt;/code> and inside of it another folder, &lt;code>workflows&lt;/code>. And create a file inside the &lt;code>workflows&lt;/code> directory, name it anything you want as long as the extension is &lt;code>.yaml&lt;/code>, I named mine &lt;code>gh-pages.yaml&lt;/code>. It has to be &lt;code>.yaml&lt;/code> which is just a file format. Make it look like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Build and Deploy to GH Pages&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">push&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">branches&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">build&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@v2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Set up Python 3.9&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/setup-python@v2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">python-version&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;3.9&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Install dependencies&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &lt;/span> &lt;span style="color:#ae81ff">pip install jinja2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Build&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &lt;/span> &lt;span style="color:#ae81ff">python build.py&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Deploy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">peaceiris/actions-gh-pages@v3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">github_token&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.GITHUB_TOKEN }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">publish_dir&lt;/span>: &lt;span style="color:#ae81ff">./_site&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This &lt;code>yaml&lt;/code> file describes the steps the Action will take to build and deploy the website. It&amp;rsquo;s pretty intuitive to read, top to bottom. It&amp;rsquo;s nothing different than what we did by hand earlier on our own machine:&lt;/p>
&lt;ol>
&lt;li>Give this action a name&lt;/li>
&lt;li>Configure the action to execute &lt;em>on push to branch &lt;code>main&lt;/code>&lt;/em>&lt;/li>
&lt;li>Describe the step-by-step the &lt;em>build&lt;/em> job will take (running on a ubuntu machine on GitHub servers)
&lt;ol>
&lt;li>Install: &lt;code>python 3.9&lt;/code>&lt;/li>
&lt;li>Install the dependency: &lt;code>jinja2&lt;/code>&lt;/li>
&lt;li>Build website&lt;/li>
&lt;li>Deploy website to the &lt;code>gh-pages&lt;/code> branch&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>For the last step, we use a handy third-party GitHub Action that pushes a sub-folder to a different branch. You can learn more in &lt;a href="https://github.com/peaceiris/actions-gh-pages">their website&lt;/a>, you can even push it to a completely different repository.&lt;/p>
&lt;p>Now we can add the &lt;code>_site/&lt;/code> to the &lt;code>.gitignore&lt;/code> file, because this folder will be created by the GitHub Action, not by us anymore. And finally, commit and push these new changes to the &lt;code>main&lt;/code> branch:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git rm -rf --cached .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git add .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git commit -m &lt;span style="color:#e6db74">&amp;#34;Added build action&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git push -u origin main
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After you &lt;code>push&lt;/code>, you can even go to the repo&amp;rsquo;s &lt;code>Action&lt;/code> menu and see for yourself the progress of the build:&lt;/p>
&lt;p>
&lt;p>
&lt;picture>
&lt;source media="(max-width: 376px)"
srcset="">
&lt;source media="(max-width: 992px)"
srcset="">
&lt;source media="(max-width: 1400px)"
srcset="">
&lt;source media="(min-width: 1600px)"
srcset="/posts/building-and-hosting-a-static-website-for-free-on-github/images/Screen_Shot_2021_12_09_at_15_17_46_5592becbd2_hu4d88469705f2186a6b82bbc80e158069_412151_1500x0_resize_box_3.png">
&lt;img alt="GitHub Actions" title="GitHub Actions" src="/posts/building-and-hosting-a-static-website-for-free-on-github/images/Screen_Shot_2021_12_09_at_15_17_46_5592becbd2_hu4d88469705f2186a6b82bbc80e158069_412151_1500x0_resize_box_3.png">
&lt;/picture>
&lt;/p>
&lt;/p>
&lt;p>If successful, you can now visit the website at &lt;code>https://&amp;lt;username&amp;gt;.github.io&lt;/code> and it should work just fine..&lt;/p>
&lt;p>One last thing though! In my case, I have been using static assets (if you remember from previous posts), and at some point I configured in the &lt;code>build.py&lt;/code> script the &lt;code>BASE_URL='http://localhost:8000'&lt;/code> constant. If I visit &lt;code>https://regisin.github.io/research&lt;/code> it doesn&amp;rsquo;t load the images&amp;hellip; because they are pointing to &lt;code>localhost&lt;/code> which is not really what I want.&lt;/p>
&lt;p>
&lt;p>
&lt;picture>
&lt;source media="(max-width: 376px)"
srcset="">
&lt;source media="(max-width: 992px)"
srcset="">
&lt;source media="(max-width: 1400px)"
srcset="">
&lt;source media="(min-width: 1600px)"
srcset="/posts/building-and-hosting-a-static-website-for-free-on-github/images/Screen_Shot_2021_12_09_at_15_20_24_7a9dd37c36_hub894bde878ced8f219d9d9957056f95b_18330_500x0_resize_box_3.png">
&lt;img alt="Hosted website with wrong configuration" title="Hosted website with wrong configuration" src="images/Screen_Shot_2021_12_09_at_15_20_24_7a9dd37c36.png">
&lt;/picture>
&lt;/p>
&lt;/p>
&lt;p>Since now the website is being hosted remotely on GitHub, I need to change it to: &lt;code>BASE_URL='https://regisin.github.io'&lt;/code>. One last push&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git add .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git commit -m &lt;span style="color:#e6db74">&amp;#34;Added build action&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git push -u origin main
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>
&lt;p>
&lt;picture>
&lt;source media="(max-width: 376px)"
srcset="">
&lt;source media="(max-width: 992px)"
srcset="">
&lt;source media="(max-width: 1400px)"
srcset="">
&lt;source media="(min-width: 1600px)"
srcset="">
&lt;img alt="Hosted website with correct configuration" title="Hosted website with correct configuration" src="images/Screen_Shot_2021_12_09_at_15_22_01_bccb068de1.png">
&lt;/picture>
&lt;/p>
&lt;/p>
&lt;p>And we&amp;rsquo;re done! Phew, not a lot of coding, more configuration than anything else&amp;hellip;&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>In this post we:&lt;/p>
&lt;ul>
&lt;li>Created a GitHub account&lt;/li>
&lt;li>Created a special repository&lt;/li>
&lt;li>Created 2 different branches in the repository&lt;/li>
&lt;li>Pushed the source code of the website to the &lt;code>main&lt;/code> branch&lt;/li>
&lt;li>Pushed the built website to the &lt;code>gh-pages&lt;/code> branch that GitHub will serve from by hand&lt;/li>
&lt;li>Configured a CD process with GitHub Actions to automate the build/deploy process&lt;/li>
&lt;/ul></content></item><item><title>The Forgotten Page</title><link>/posts/the-forgotten-page/</link><pubDate>Tue, 23 Nov 2021 00:00:01 -0500</pubDate><guid>/posts/the-forgotten-page/</guid><description>Table of content Table of content Recap Making the base more than boilerplate Add menu to the header All lefts reserved A word about the style The face of the website Finally, the (disappointing) front page Summary Recap I&amp;rsquo;ve been developing a static website that already has a few different pages in it:
/about: an introduction to myself /teaching: list of all the courses taught /research: list of all research projects /research/{title}: subpage of /research, with more details of a single research project Oh uh!</description><content>&lt;h2 id="table-of-content">Table of content&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="#table-of-content">Table of content&lt;/a>&lt;/li>
&lt;li>&lt;a href="#recap">Recap&lt;/a>&lt;/li>
&lt;li>&lt;a href="#making-the-base-more-than-boilerplate">Making the base more than boilerplate&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#add-menu-to-the-header">Add menu to the header&lt;/a>&lt;/li>
&lt;li>&lt;a href="#all-lefts-reserved">All lefts reserved&lt;/a>&lt;/li>
&lt;li>&lt;a href="#a-word-about-the-style">A word about the style&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#the-face-of-the-website">The face of the website&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#finally-the-disappointing-front-page">Finally, the (disappointing) front page&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#summary">Summary&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="recap">Recap&lt;/h2>
&lt;p>I&amp;rsquo;ve been developing a static website that already has a few different pages in it:&lt;/p>
&lt;ul>
&lt;li>&lt;code>/about&lt;/code>: an introduction to myself&lt;/li>
&lt;li>&lt;code>/teaching&lt;/code>: list of all the courses taught&lt;/li>
&lt;li>&lt;code>/research&lt;/code>: list of all research projects&lt;/li>
&lt;li>&lt;code>/research/{title}&lt;/code>: subpage of &lt;code>/research&lt;/code>, with more details of a single research project&lt;/li>
&lt;/ul>
&lt;p>Oh uh! There is one very important page missing, the &lt;code>/&lt;/code>! This is the initial page that loads whenever you type in the address of a website on the browser. In our case, that would be &lt;code>localhost:8000/&lt;/code>. I&amp;rsquo;ve been fiddling around with the subpages so much that I forgot the most important one. In this post I will create the initial index page for my website. It will be the place where all other subpages are referenced, so whoever visits the website can click around and visit them.&lt;/p>
&lt;h2 id="making-the-base-more-than-boilerplate">Making the base more than boilerplate&lt;/h2>
&lt;p>So if you have ever visited websites (if you haven&amp;rsquo;t, I&amp;rsquo;d like to know how you&amp;rsquo;re reading this right now&amp;hellip;) you might notice that they look subjectively pretty, with menus and organized buttons, and we have none of that. Because those menus are pretty much consistent throughout the website, it makes sense that we add it to the &lt;code>base.html&lt;/code> template and not in every template we have already created!&lt;/p>
&lt;p>If you&amp;rsquo;ve been following this series along, the current base template looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">title&lt;/span>&amp;gt;{{ title }}&amp;lt;/&lt;span style="color:#f92672">title&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {% block content %}{% endblock %}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Well, this template was useful to learn how templates actually work but now it just looks boring. I will add the header and footer sections:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">title&lt;/span>&amp;gt;{{ title }}&amp;lt;/&lt;span style="color:#f92672">title&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">style&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">html&lt;/span>&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">body&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">height&lt;/span>: &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">margin&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">min-height&lt;/span>: &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">margin&lt;/span>: &lt;span style="color:#66d9ef">auto&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">position&lt;/span>: &lt;span style="color:#66d9ef">relative&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #header {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">padding&lt;/span>: &lt;span style="color:#ae81ff">10&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #content {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">position&lt;/span>: &lt;span style="color:#66d9ef">relative&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">padding-bottom&lt;/span>: &lt;span style="color:#ae81ff">2.5&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span>; &lt;span style="color:#75715e">/* same as #footer.height*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #footer {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">width&lt;/span>: &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">height&lt;/span>: &lt;span style="color:#ae81ff">2.5&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">position&lt;/span>: &lt;span style="color:#66d9ef">absolute&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">bottom&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">left&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">padding&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">style&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;header&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {% include &amp;#39;header.html&amp;#39; %}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;content&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {% block content %}{% endblock %}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;footer&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {% include &amp;#39;footer.html&amp;#39; %}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There are a couple of new things here, let&amp;rsquo;s break it down:&lt;/p>
&lt;ul>
&lt;li>We added a &lt;code>&amp;lt;style&amp;gt;&lt;/code> tag to the &lt;code>&amp;lt;head&amp;gt;&lt;/code>. This is where we define CSS styles that will be applied to the rendered components (the stuff in the &lt;code>&amp;lt;body&amp;gt;&lt;/code>)&lt;/li>
&lt;li>We also added the &lt;code>{% include 'file.html' %}&lt;/code> block. This is a &lt;code>Jinja2&lt;/code> thing. This block is a placeholder and will load the contents of the &lt;code>'file.html'&lt;/code> in that exat spot&lt;/li>
&lt;/ul>
&lt;p>Having these Jinja building blocks can help keeping the templates organized and succint. As the templates grow bigger and become more complex, we can break them down into individual components, which is what is happening here. Naturally there is no &lt;code>header.html&lt;/code> or &lt;code>footer.html&lt;/code> file and we will need to create them now.&lt;/p>
&lt;h3 id="add-menu-to-the-header">Add menu to the header&lt;/h3>
&lt;p>The &lt;code>header.html&lt;/code> block will contain a fragment of &lt;code>html&lt;/code> code that will always be placed at the top of any page rendered by the build script. This is where I put the top menu links, so people can navigate through the website. Here&amp;rsquo;s what my header block looks like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">a&lt;/span> &lt;span style="color:#a6e22e">href&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>&amp;gt;Home&amp;lt;/&lt;span style="color:#f92672">a&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">a&lt;/span> &lt;span style="color:#a6e22e">href&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/about&amp;#34;&lt;/span>&amp;gt;About&amp;lt;/&lt;span style="color:#f92672">a&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">a&lt;/span> &lt;span style="color:#a6e22e">href&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/teaching&amp;#34;&lt;/span>&amp;gt;Teaching&amp;lt;/&lt;span style="color:#f92672">a&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">a&lt;/span> &lt;span style="color:#a6e22e">href&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/research&amp;#34;&lt;/span>&amp;gt;Research&amp;lt;/&lt;span style="color:#f92672">a&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="all-lefts-reserved">All lefts reserved&lt;/h3>
&lt;p>I can&amp;rsquo;t really say what goes in the footer of a website. Honestly, it&amp;rsquo;s rare that I scroll all the way down of a website nowadays. Anyways, it could be links to social media accounts, it can show contact information&amp;hellip; the footer of the website will always be at the bottom of a webpage, whatever you think deserves that space, you put it in the &lt;code>footer.html&lt;/code>. Mine looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">footer&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;No rights reserved 2021&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">footer&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="a-word-about-the-style">A word about the style&lt;/h3>
&lt;p>If you noticed, I hard coded all the CSS style in the &lt;code>base.html&lt;/code> template. For a small website like this it should be fine. However, if your website grows or you just want to use the best practices for the long term, add the stylesheet to your static assets in a css file. Create the &lt;code>static/css/style.css&lt;/code> file, and move the stuff from the &lt;code>&amp;lt;style&amp;gt;&lt;/code> tag in there:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">html&lt;/span>&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">body&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">height&lt;/span>: &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">margin&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">min-height&lt;/span>: &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">margin&lt;/span>: &lt;span style="color:#66d9ef">auto&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">position&lt;/span>: &lt;span style="color:#66d9ef">relative&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>#header {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">padding&lt;/span>: &lt;span style="color:#ae81ff">10&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>#content {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">position&lt;/span>: &lt;span style="color:#66d9ef">relative&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">padding-bottom&lt;/span>: &lt;span style="color:#ae81ff">2.5&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span>; &lt;span style="color:#75715e">/* same as #footer.height*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>#footer {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">width&lt;/span>: &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">height&lt;/span>: &lt;span style="color:#ae81ff">2.5&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">position&lt;/span>: &lt;span style="color:#66d9ef">absolute&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">bottom&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">left&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">padding&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, in the &lt;code>base.html&lt;/code>, remove the &lt;code>&amp;lt;style&amp;gt;&lt;/code> tag, and add &lt;code>&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;path/to/static/assets/css/style.css&amp;quot;&amp;gt;&lt;/code> in the &lt;code>&amp;lt;head&amp;gt;&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;!-- ommitted code here --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">title&lt;/span>&amp;gt;{{ title }}&amp;lt;/&lt;span style="color:#f92672">title&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">link&lt;/span> &lt;span style="color:#a6e22e">rel&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;stylesheet&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">href&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{{ BASE_URL }}/css/style.css&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;!-- ommitted code here --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We use the &lt;code>BASE_URL&lt;/code> value to define the path of the static asset for the CSS stylesheet. That value is already being passed to the templates by the &lt;code>build.py&lt;/code> script.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>BASE_URL&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;http://localhost:8000&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># ommitted code here&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>template &lt;span style="color:#f92672">=&lt;/span> env&lt;span style="color:#f92672">.&lt;/span>get_template(&lt;span style="color:#e6db74">&amp;#39;about.html&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>output &lt;span style="color:#f92672">=&lt;/span> template&lt;span style="color:#f92672">.&lt;/span>render(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BASE_URL&lt;span style="color:#f92672">=&lt;/span>BASE_URL,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> title&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;About&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># ommitted code here &lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Cool, we now have a nice little menu at the top and a useless footer at the bottom of every page&amp;hellip; but I think I&amp;rsquo;m forgetting something&amp;hellip; oh yeah, the initial page!&lt;/p>
&lt;h2 id="the-face-of-the-website">The face of the website&lt;/h2>
&lt;p>If I visit my site at &lt;code>http://localhost:8000&lt;/code> it looks weird, like it a file explorer, listing all the folders and files in the build dir &lt;code>/_site&lt;/code>. That is the default behavior of the python webserver we use. If there is no &lt;code>index.html&lt;/code> it will list the files of the folder. While that&amp;rsquo;s ok while you are developing on your own computer, it is definitely not a good thing to have that hapopen when your website is actually hosted on an actual server.&lt;/p>
&lt;p>
&lt;/p>
&lt;p>In fact, that is usually NOT the default behavior of hosted webservers out there. To disable this on the python webserver is easy, we just add &lt;code>-d False&lt;/code> to the command line:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>python3 -m http.server --directory ./_site -d False
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now if I navigate to &lt;code>localhost:8000&lt;/code> it returns the infamous &lt;code>404 Not Found&lt;/code> page:&lt;/p>
&lt;p>
&lt;p>
&lt;picture>
&lt;source media="(max-width: 376px)"
srcset="">
&lt;source media="(max-width: 992px)"
srcset="">
&lt;source media="(max-width: 1400px)"
srcset="">
&lt;source media="(min-width: 1600px)"
srcset="/posts/the-forgotten-page/images/Screen_Shot_2021_11_23_at_15_54_55_bd13ff7fb9_hu6132ac2e5ba9529c4c1638d231462fd9_78605_800x0_resize_box_3.png">
&lt;img alt="404 Not Found" title="404 Not Found" src="images/Screen_Shot_2021_11_23_at_15_54_55_bd13ff7fb9.png">
&lt;/picture>
&lt;/p>
&lt;/p>
&lt;h3 id="finally-the-disappointing-front-page">Finally, the (disappointing) front page&lt;/h3>
&lt;p>Cool, but wnow I need to decide what the face of my website will be. In practice it could be many different things. Some personal websites are blogs, so their initial page is the list of blog posts. Others provide an intro to the website explaining what it is about. Well, I already have an &lt;code>/about&lt;/code> page created, and since I&amp;rsquo;m feeling lazy right now, I will just reuse it, so the home (&lt;code>localhost:8000/&lt;/code>) as well as the about (&lt;code>localhost:8000/about&lt;/code>) will be the exact same thing.&lt;/p>
&lt;p>In my build script I&amp;rsquo;ll add this at the beginning:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">Home
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># /&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>template &lt;span style="color:#f92672">=&lt;/span> env&lt;span style="color:#f92672">.&lt;/span>get_template(&lt;span style="color:#e6db74">&amp;#39;about.html&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>output &lt;span style="color:#f92672">=&lt;/span> template&lt;span style="color:#f92672">.&lt;/span>render(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BASE_URL&lt;span style="color:#f92672">=&lt;/span>BASE_URL,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> title&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Home&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>o &lt;span style="color:#f92672">=&lt;/span> BUILD_PATH &lt;span style="color:#f92672">/&lt;/span> Path(&lt;span style="color:#e6db74">&amp;#39;index.html&amp;#39;&lt;/span>) &lt;span style="color:#75715e"># http://BASE_URL/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">with&lt;/span> o&lt;span style="color:#f92672">.&lt;/span>open(mode&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;w&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> fh:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fh&lt;span style="color:#f92672">.&lt;/span>write(output)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It is the same as the &lt;code>/about&lt;/code>, just changing the output path to be the build folder itself &lt;code>/_site/index.html&lt;/code>, and also passing a different &lt;code>title&lt;/code> to make sure visitors don&amp;rsquo;t get confused :shushing_face: :sunglasses:.&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>In this post we:&lt;/p>
&lt;ul>
&lt;li>Created the header and footer blocks&lt;/li>
&lt;li>Put the CSS styles in a static asset&lt;/li>
&lt;li>Disabled the directory listing option of the python webserver&lt;/li>
&lt;li>Created the front page (reused the &lt;code>/about&lt;/code> page)&lt;/li>
&lt;/ul></content></item><item><title>The Details Page</title><link>/posts/the-details-page/</link><pubDate>Wed, 17 Nov 2021 00:00:01 -0500</pubDate><guid>/posts/the-details-page/</guid><description>Table of content Table of content Recap The details page New template Moar data Adding the new page to the build flow A word on the development workflow Summary Recap I have created a static website with a few pages in it: the About page, the Teaching, and the Research pages. The /research page, which is kind of my professional portfolio, right now simply shows a list of my research projects, but does not give out any details just yet&amp;hellip; It&amp;rsquo;s time to change that.</description><content>&lt;h2 id="table-of-content">Table of content&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="#table-of-content">Table of content&lt;/a>&lt;/li>
&lt;li>&lt;a href="#recap">Recap&lt;/a>&lt;/li>
&lt;li>&lt;a href="#the-details-page">The details page&lt;/a>&lt;/li>
&lt;li>&lt;a href="#new-template">New template&lt;/a>&lt;/li>
&lt;li>&lt;a href="#moar-data">Moar data&lt;/a>&lt;/li>
&lt;li>&lt;a href="#adding-the-new-page-to-the-build-flow">Adding the new page to the build flow&lt;/a>&lt;/li>
&lt;li>&lt;a href="#a-word-on-the-development-workflow">A word on the development workflow&lt;/a>&lt;/li>
&lt;li>&lt;a href="#summary">Summary&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="recap">Recap&lt;/h2>
&lt;p>I have created a static website with a few pages in it: the About page, the Teaching, and the Research pages. The &lt;code>/research&lt;/code> page, which is kind of my professional portfolio, right now simply shows a list of my research projects, but does not give out any details just yet&amp;hellip; It&amp;rsquo;s time to change that. In this post, I will be creating a details page for each research project in the data store.&lt;/p>
&lt;p>Like I said before, I have this &lt;code>/research&lt;/code> page in the website, and if we check it out all it does is display all of the projects in a &lt;code>&amp;lt;ul&amp;gt;&lt;/code> list. Each project has an image associated with it, the thumbnail, and a short description of the project, the excerpt. Both the thumbnail and the excerpt are fields in the datastore (or keys in a dictionary), so when we add a new project to the file, we need to make sure we follow the same structure.&lt;/p>
&lt;p>The excerpt and thumbnail are both text strings, but in reality they are used differently. The excerpt text will be printed out as is, meaning the &lt;code>build.py&lt;/code> script will read it and inject that string into the template where the placeholder is.&lt;/p>
&lt;p>The thumbnail, on the other hand, even though it&amp;rsquo;s just a piece of text, the text itself is not displayed directly. Instead, it is used to make up the source &lt;code>src&lt;/code> property of an &lt;code>&amp;lt;img&amp;gt;&lt;/code> tag in the html. The thumbnail must point to the location of the image file on the server, otherwise no image will show up in the rendered website when it is served.&lt;/p>
&lt;p>Just to give you an overview of the files and a step-by-step of what happens, here are samples of the datastore &lt;code>data.py&lt;/code>, the template &lt;code>research.html&lt;/code>, the &lt;code>build.py&lt;/code> script, and the generated &lt;code>index.html&lt;/code>, and the folder structure of the project:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>A single entry in the &lt;code>research&lt;/code> from &lt;code>data.py&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>research &lt;span style="color:#f92672">=&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># ... other items ommited&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;name&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;My Awesome Research&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;slug&amp;#39;&lt;/span> : &lt;span style="color:#e6db74">&amp;#39;my-awesome-research&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;excerpt&amp;#39;&lt;/span> : &lt;span style="color:#e6db74">&amp;#39;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed aliquam lectus eget nisl iaculis, at maximus elit convallis. Donec mattis, sem et imperdiet convallis, leo enim tincidunt massa, non aliquam ante libero sollicitudin quam. Maecenas facilisis urna urna, sed malesuada diam facilisis sit amet.&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;thumbnail&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;/images/my-awesome-research-thumb.png&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># ...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>The &lt;code>research.html&lt;/code> template file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>{% extends &amp;#39;base.html&amp;#39; %}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{% block content %}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;{{ title }}&amp;lt;/&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {% for project in projects %}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">a&lt;/span> &lt;span style="color:#a6e22e">href&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">/research/{{&lt;/span> &lt;span style="color:#a6e22e">project&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">.&lt;/span>&lt;span style="color:#a6e22e">slug&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">}}&lt;/span>&amp;gt;{{ project.name }}&amp;lt;/&lt;span style="color:#f92672">a&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">table&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">tr&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">td&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">img&lt;/span> &lt;span style="color:#a6e22e">src&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">{{&lt;/span> &lt;span style="color:#a6e22e">BASE_URL&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">}}{{&lt;/span> &lt;span style="color:#a6e22e">project&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">.&lt;/span>&lt;span style="color:#a6e22e">thumbnail&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">}}&lt;/span> &lt;span style="color:#a6e22e">width&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;200pt&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">td&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">td&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;{{ project.excerpt }}&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">td&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">tr&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">table&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {% endfor %}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{% endblock %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Relevant snippet of the &lt;code>build.py&lt;/code> script:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># ... ommited code&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>shutil&lt;span style="color:#f92672">.&lt;/span>copytree(STATIC_PATH, BUILD_PATH) &lt;span style="color:#75715e"># Copy the static folder to the build dir&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># ...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">Research
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>template &lt;span style="color:#f92672">=&lt;/span> env&lt;span style="color:#f92672">.&lt;/span>get_template(&lt;span style="color:#e6db74">&amp;#39;research.html&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>output &lt;span style="color:#f92672">=&lt;/span> template&lt;span style="color:#f92672">.&lt;/span>render(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BASE_URL&lt;span style="color:#f92672">=&lt;/span>BASE_URL,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> title&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Research&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> projects&lt;span style="color:#f92672">=&lt;/span>research
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>o &lt;span style="color:#f92672">=&lt;/span> BUILD_PATH &lt;span style="color:#f92672">/&lt;/span> Path(&lt;span style="color:#e6db74">&amp;#34;research&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>o&lt;span style="color:#f92672">.&lt;/span>mkdir(parents&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>, exist_ok&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>o &lt;span style="color:#f92672">=&lt;/span> o &lt;span style="color:#f92672">/&lt;/span> Path(&lt;span style="color:#e6db74">&amp;#39;index.html&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">with&lt;/span> o&lt;span style="color:#f92672">.&lt;/span>open(mode&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;w&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> fh:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fh&lt;span style="color:#f92672">.&lt;/span>write(output)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>The generated &lt;code>index.html&lt;/code> that is placed in &lt;code>/project/folder/_site/research/index.html&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">title&lt;/span>&amp;gt;Research&amp;lt;/&lt;span style="color:#f92672">title&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;Research&amp;lt;/&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">a&lt;/span> &lt;span style="color:#a6e22e">href&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">/research/my-awesome-research&lt;/span>&amp;gt;My Awesome Research&amp;lt;/&lt;span style="color:#f92672">a&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">table&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">tr&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">td&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">img&lt;/span> &lt;span style="color:#a6e22e">src&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">http://localhost:8000/images/my-awesome-research-thumb.png&lt;/span> &lt;span style="color:#a6e22e">width&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;200pt&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">td&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">td&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed aliquam lectus eget nisl iaculis, at maximus elit convallis. Donec mattis, sem et imperdiet convallis, leo enim tincidunt massa, non aliquam ante libero sollicitudin quam. Maecenas facilisis urna urna, sed malesuada diam facilisis sit amet.&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">td&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">tr&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">table&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!-- ommitted html: this is where other &amp;lt;h2&amp;gt;...&amp;lt;/h2&amp;gt;&amp;lt;table&amp;gt;...&amp;lt;/table&amp;gt; combos will show up, one for each entry in the research datastore --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Folder structure, &lt;code>/_site&lt;/code> is the build script, and we don&amp;rsquo;t manipulate files in there directly:&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>/path/to/project/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-build.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-data.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-static/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-files/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-images/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-my-alright-research-thumb.png
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-my-awesome-research-thumb.png
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-templates/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-about.html
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-base.html
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-research.html
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-teaching.html
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-_site/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-about/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-index.html
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-files/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-images/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-my-alright-research-thumb.png
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-my-awesome-research-thumb.png
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-research/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-index.html
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-teaching/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-index.html
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="the-details-page">The details page&lt;/h2>
&lt;p>All of this is working fine, so now what? Well, now I want to give some more information about each project. I want to showcase my work to the visitors by creating a new subpage, dedicated to a single project. To do this there are a few things I&amp;rsquo;ll need to do.&lt;/p>
&lt;h2 id="new-template">New template&lt;/h2>
&lt;p>First, I need to create a new template to show the details of a research project. So let&amp;rsquo;s do that. Create a new template file in the &lt;code>/templates&lt;/code> folder, I&amp;rsquo;m going to call it &lt;code>research_detail.html&lt;/code>, and it will look like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>{% extends &amp;#39;base.html&amp;#39; %}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{% block content %}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;{{ project.name }}&amp;lt;/&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;{{ project.description }}&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;People&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">ul&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {% for person in project.people %}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {% if &amp;#39;url&amp;#39; in person %}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">a&lt;/span> &lt;span style="color:#a6e22e">href &lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{{ person.url }}&amp;#34;&lt;/span>&amp;gt;{{ person.name }}&amp;lt;/&lt;span style="color:#f92672">a&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {% else %}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{ person.name }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {% endif %}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {% endfor %}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">ul&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;Resources&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {% for res in project.embed %}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{ res }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {% endfor %}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{% endblock %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Wow, ok, so what&amp;rsquo;s going on here? Let&amp;rsquo;s break it down:&lt;/p>
&lt;ol>
&lt;li>We extend the base template as usual, and we define stuff to go in the &lt;code>content&lt;/code> block&lt;/li>
&lt;li>The project name in a big old &lt;code>&amp;lt;h1&amp;gt;&lt;/code> tag.&lt;/li>
&lt;li>The description of the project, which will be a comprehensive text so it can get quite big, in a paragraph &lt;code>&amp;lt;p&amp;gt;&lt;/code>.&lt;/li>
&lt;li>A section of the page to list all the people that worked with me in the project. &lt;em>Side note: always give credit when credit is due!&lt;/em>
&lt;ol>
&lt;li>For each person associated with this project, the template checks if they have a url field associated with the person. It checks if the dictionary has the key &lt;code>url&lt;/code>, and if so, it will output an anchor &lt;code>&amp;lt;a&amp;gt;&lt;/code> link, otherwise it simply prints out the name of the person.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Finally, there is a resource section. This section is where I&amp;rsquo;ll embed some &lt;code>html&lt;/code> components directly from the data store.&lt;/li>
&lt;/ol>
&lt;p>Naturally, I need to edit my data store and add these things to each research project next.&lt;/p>
&lt;h2 id="moar-data">Moar data&lt;/h2>
&lt;p>Let&amp;rsquo;s make it look like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>research &lt;span style="color:#f92672">=&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># ... ommitted the other project&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;name&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;My Awesome Research&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;slug&amp;#39;&lt;/span> : &lt;span style="color:#e6db74">&amp;#39;my-awesome-research&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;excerpt&amp;#39;&lt;/span> : &lt;span style="color:#e6db74">&amp;#39;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed aliquam lectus eget nisl iaculis, at maximus elit convallis. Donec mattis, sem et imperdiet convallis, leo enim tincidunt massa, non aliquam ante libero sollicitudin quam. Maecenas facilisis urna urna, sed malesuada diam facilisis sit amet.&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;thumbnail&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;/images/my-awesome-research-thumb.png&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;description&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam et pulvinar erat. Suspendisse ultricies placerat mi at gravida. Nulla tellus eros, lacinia suscipit sem in, dignissim interdum nulla. Sed tincidunt diam ac lectus scelerisque aliquet. Sed tincidunt lorem ut enim aliquam hendrerit at eget ante. Cras at interdum diam, sed iaculis nunc. Ut dictum sit amet quam non ornare. Phasellus interdum congue convallis.Suspendisse rutrum quis neque et pharetra. Pellentesque porttitor tortor sit amet risus volutpat maximus. Ut ultrices metus non vestibulum ullamcorper. Morbi eu lacus metus. Etiam ac scelerisque ante. Praesent ut erat dictum, tristique orci laoreet, ultrices diam. Cras luctus ex at massa convallis auctor. Suspendisse facilisis lobortis lectus quis molestie. Praesent velit odio, fringilla gravida dolor non, faucibus facilisis quam. Nunc imperdiet consectetur arcu sit amet fringilla. Aenean ipsum dolor, consequat luctus magna at, varius vestibulum lorem. Nullam malesuada magna eu massa rutrum, in vestibulum eros vestibulum. Maecenas volutpat nunc et nulla semper, quis viverra leo pellentesque. Ut pellentesque sem et commodo hendrerit. Cras vitae pharetra neque.Cras aliquam vel mauris egestas egestas. Vestibulum at orci a quam vehicula viverra. Sed finibus eget mi vel viverra. Phasellus quis ligula non ante consectetur pellentesque quis eget eros. Ut vestibulum laoreet iaculis. Nam fermentum lacus sed elit bibendum hendrerit. Sed rutrum viverra lacus, non consequat urna consequat at. Fusce vehicula tristique turpis ornare bibendum. Praesent quam sapien, porttitor vel tincidunt vel, feugiat et justo.Maecenas in lectus quis neque interdum bibendum. Cras dapibus commodo leo, quis eleifend velit. Vivamus vel erat lobortis diam ornare blandit eget eget nisi. Duis id mauris purus. Vestibulum sagittis felis libero, ac ullamcorper dolor convallis quis. Maecenas et vestibulum augue, non efficitur metus. Pellentesque efficitur libero ut nulla pretium, eu dapibus mi consequat. Sed non tortor volutpat, porta ligula et, consequat sapien. Cras quis metus vitae mi euismod vulputate a non mi.Praesent ornare pretium iaculis. Pellentesque mollis lorem id pretium viverra. Praesent ac nisi scelerisque, ornare arcu id, viverra augue. Maecenas congue, diam vel viverra suscipit, urna felis posuere felis, ac eleifend erat nulla a dui. Sed suscipit vel ex eget rhoncus. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Nunc facilisis interdum massa ut feugiat.&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;people&amp;#39;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#e6db74">&amp;#39;name&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;John Doe&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;url&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;https://google.com&amp;#39;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#e6db74">&amp;#39;name&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;Jane Doe&amp;#39;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#e6db74">&amp;#39;name&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;Marcus Zucko&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;url&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;https://facebok.com&amp;#39;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;embed&amp;#39;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34; src=&amp;#34;https://www.youtube.com/embed/ACmmxe3vPjo&amp;#34; frameborder=&amp;#34;0&amp;#34; allow=&amp;#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34; src=&amp;#34;https://www.youtube.com/embed/ACmmxe3vPjo&amp;#34; frameborder=&amp;#34;0&amp;#34; allow=&amp;#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>So what&amp;rsquo;s happening in the data? We added a few new key/value pairs to the dictionary to represent a project:&lt;/p>
&lt;ul>
&lt;li>The &lt;code>description&lt;/code>, which is just a giant text.&lt;/li>
&lt;li>The people, which is a list of dictionaries where each entry has at least a &lt;code>name&lt;/code>, and may have a &lt;code>url&lt;/code> field.&lt;/li>
&lt;li>Then we also have this &lt;code>embed&lt;/code> field, which is a list of strings.&lt;/li>
&lt;/ul>
&lt;p>Each string in the &lt;code>embed&lt;/code> list actually looks like some &lt;code>html&lt;/code> code! They are &lt;code>&amp;lt;iframe&amp;gt;&lt;/code> tags that I got from the Youtube videos that I made specifically for this project. I got this code directly from the Youtube&amp;rsquo;s website using the share options. You can get the code from any video, just click on share, then the embed option, and Youtube will give you the exact &lt;code>html&lt;/code> code.&lt;/p>
&lt;p>What will happen is that that string will be injected into the final &lt;code>html&lt;/code> file as is, and once loaded by the browser, it will show the youtube video instead of the &lt;code>html&lt;/code> characters like &lt;code>&amp;lt;&lt;/code> and &lt;code>&amp;gt;&lt;/code>. So if you have demo videos made for a project, this is a way you can showcase it. Visitors to the website won&amp;rsquo;t have to leave the website to watch the video, they can watch it right there.&lt;/p>
&lt;p>Ok, ok. If you haven&amp;rsquo;t realized yet, we did not touch the build script. All we did so far doesn&amp;rsquo;t really reflect in the built website if we run the script yet. Let&amp;rsquo;s deal with that next.&lt;/p>
&lt;h2 id="adding-the-new-page-to-the-build-flow">Adding the new page to the build flow&lt;/h2>
&lt;p>In the &lt;code>build.py&lt;/code> script we need to iterate over all the research projects from the data store, and then create individual subfolders for each one of them, and then feed the template with the data, and spit out an &lt;code>index.html&lt;/code> into that subfolder. We will end up with something like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">Research
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># /research&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>template &lt;span style="color:#f92672">=&lt;/span> env&lt;span style="color:#f92672">.&lt;/span>get_template(&lt;span style="color:#e6db74">&amp;#39;research.html&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>output &lt;span style="color:#f92672">=&lt;/span> template&lt;span style="color:#f92672">.&lt;/span>render(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BASE_URL&lt;span style="color:#f92672">=&lt;/span>BASE_URL,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> title&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Research&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> projects&lt;span style="color:#f92672">=&lt;/span>research
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>o &lt;span style="color:#f92672">=&lt;/span> BUILD_PATH &lt;span style="color:#f92672">/&lt;/span> Path(&lt;span style="color:#e6db74">&amp;#34;research&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>o&lt;span style="color:#f92672">.&lt;/span>mkdir(parents&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>, exist_ok&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>o &lt;span style="color:#f92672">=&lt;/span> o &lt;span style="color:#f92672">/&lt;/span> Path(&lt;span style="color:#e6db74">&amp;#39;index.html&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">with&lt;/span> o&lt;span style="color:#f92672">.&lt;/span>open(mode&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;w&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> fh:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fh&lt;span style="color:#f92672">.&lt;/span>write(output)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">Research project detail
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># /research/*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>template &lt;span style="color:#f92672">=&lt;/span> env&lt;span style="color:#f92672">.&lt;/span>get_template(&lt;span style="color:#e6db74">&amp;#39;research_detail.html&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> r &lt;span style="color:#f92672">in&lt;/span> research:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> output &lt;span style="color:#f92672">=&lt;/span> template&lt;span style="color:#f92672">.&lt;/span>render(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> general&lt;span style="color:#f92672">=&lt;/span>gen,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> title&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;Project details&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> project&lt;span style="color:#f92672">=&lt;/span>r
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> o &lt;span style="color:#f92672">=&lt;/span> path &lt;span style="color:#f92672">/&lt;/span> Path(&lt;span style="color:#e6db74">&amp;#34;research/&amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>r[&lt;span style="color:#e6db74">&amp;#39;slug&amp;#39;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> o&lt;span style="color:#f92672">.&lt;/span>mkdir(parents&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>, exist_ok&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> o &lt;span style="color:#f92672">=&lt;/span> o &lt;span style="color:#f92672">/&lt;/span> Path(&lt;span style="color:#e6db74">&amp;#39;index.html&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">with&lt;/span> o&lt;span style="color:#f92672">.&lt;/span>open(mode&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;w&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> fh:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fh&lt;span style="color:#f92672">.&lt;/span>write(output)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It looks pretty similar to the other pages we generated, the only difference is that we loop over each research project inside the &lt;code>research&lt;/code> list and create a dedicated subpage (using the &lt;code>slug&lt;/code> item to name the folder) for each one of those items.&lt;/p>
&lt;p>Now you can build and serve and test it out by loading &lt;code>localhost:8000/research/my-awesome-research/&lt;/code> in the browser (or go to &lt;code>localhost:8000/research&lt;/code> and click the links!):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>python build.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>python -m http.server --directory ./_site
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>![The details page]images/Screen_Shot_2021_11_17_at_12_07_47_2a8cc2edd3.png)&lt;/p>
&lt;h2 id="a-word-on-the-development-workflow">A word on the development workflow&lt;/h2>
&lt;p>What we did today should feel pretty similar to what we have done so far for each new page in the website. In fact, we&amp;rsquo;re not doing anything different&amp;hellip; We do the same thing over and over again: add information to the database, create a template with some placeholder areas, then wire it together in the build script.&lt;/p>
&lt;p>The order of events is not mandatory, if you are more comfortable with creating the build script first, and that gives you more clarity on what to do later, great, do that first. Or If you prefer to enter information into the data file first, that&amp;rsquo;s totally fine too. The order you use should make sense to you, and you can even try out different workflows while coding. And use the one that makes more sense to you.&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>In this article we:&lt;/p>
&lt;ul>
&lt;li>Created a new template for the project details&lt;/li>
&lt;li>Added more data to the each research project in the data store&lt;/li>
&lt;li>Used embedded resources from an external website: Youtube&lt;/li>
&lt;li>Build detail pages for each project using the &lt;code>slug&lt;/code> property&lt;/li>
&lt;/ul></content></item><item><title>Attack of the Static Assets</title><link>/posts/attack-of-the-static-assets/</link><pubDate>Sat, 13 Nov 2021 00:00:01 -0500</pubDate><guid>/posts/attack-of-the-static-assets/</guid><description>Table of content Table of content Recap Static assets and static website Static pages Static assets Adding static files to the project Adding static assets to the build script A new page The data manace The return of the build script The template awakens Summary A blog post ago, in a sub page far, far away&amp;hellip; Up to this point we have a static website with a couple of pages, each of which can be accessed through conveniently named URLs.</description><content>&lt;h2 id="table-of-content">Table of content&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="#table-of-content">Table of content&lt;/a>&lt;/li>
&lt;li>&lt;a href="#recap">Recap&lt;/a>&lt;/li>
&lt;li>&lt;a href="#static-assets-and-static-website">Static assets and static website&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#static-pages">Static pages&lt;/a>&lt;/li>
&lt;li>&lt;a href="#static-assets">Static assets&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#adding-static-files-to-the-project">Adding static files to the project&lt;/a>&lt;/li>
&lt;li>&lt;a href="#adding-static-assets-to-the-build-script">Adding static assets to the build script&lt;/a>&lt;/li>
&lt;li>&lt;a href="#a-new-page">A new page&lt;/a>&lt;/li>
&lt;li>&lt;a href="#the-data-manace">The data manace&lt;/a>&lt;/li>
&lt;li>&lt;a href="#the-return-of-the-build-script">The return of the build script&lt;/a>&lt;/li>
&lt;li>&lt;a href="#the-template-awakens">The template awakens&lt;/a>&lt;/li>
&lt;li>&lt;a href="#summary">Summary&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="a-blog-post-ago-in-a-sub-page-far-far-away">A blog post ago, in a sub page far, far away&amp;hellip;&lt;/h2>
&lt;p>Up to this point we have a static website with a couple of pages, each of which can be accessed through conveniently named URLs. In this article, we will see how to deal with static files that make up our website.&lt;/p>
&lt;p>Static assets are more commonly exemplified through JavaScript and CSS files that the browser loads with the webpage, and are used to customize the style, the aesthetics, of the website. Static assets can also be images, documents, or files that you upload with the site, or even the favicon, that little icon the browser shows on the tab of the website.&lt;/p>
&lt;h2 id="the-attack-of-the-assets">The attack of the assets&lt;/h2>
&lt;p>I think I need to clarify some things here. So we are building a static website, and now I&amp;rsquo;m talking about static files. You might be wondering what&amp;rsquo;s the difference between the pages and these so called &amp;ldquo;static assets&amp;rdquo;?&lt;/p>
&lt;h3 id="static-pages">Static pages&lt;/h3>
&lt;p>A static site is a website that doesn&amp;rsquo;t generate its webpages dynamically, so there&amp;rsquo;s no database that runs on a server, that each time someone&amp;rsquo;s browser sends a request to load the site, would go and fetch the database to populate the pages.&lt;/p>
&lt;p>What we are doing here is similar, but not dynamic. Yes, we look into a database, although it&amp;rsquo;s not a database, it&amp;rsquo;s just another python script. And yes, we generate pages based on the pseudo-database, but it&amp;rsquo;s not generated each time someone tries to visit the website. So the script generates static webpages, when running &lt;code>python build.py&lt;/code>, based on the given data.&lt;/p>
&lt;h3 id="static-assets">Static assets&lt;/h3>
&lt;p>Static assets are resources a website has saved on the webserver that may or may not be referenced in one of its webpages. CSS and JavaScript files are the most common examples of static files. Webpages can have a reference to these types of files, which will trigger the browser to fetch them. They allow the webdesigner to make the pages look prettier with CSS, and javascript can help with animations and alerts.&lt;/p>
&lt;p>We will NOT be using separate files for CSS/JavaScript assets in this tutorial. Instead, what I want to show here is much simpler. I will use files such as images and pdfs. Things that you would normally upload to a content management system such as wordpress. But instead I will simply add those files to your project.&lt;/p>
&lt;h2 id="revenge-of-the-assets">Revenge of the assets&lt;/h2>
&lt;p>First, let&amp;rsquo;s create another subfolder in our project folder and call it &lt;code>/static&lt;/code>. It should be on the same level as the &lt;code>/_site&lt;/code> and &lt;code>/templates&lt;/code> folders.&lt;/p>
&lt;p>Inside the static folder, create 2 subfolders: &lt;code>/static/images&lt;/code> and &lt;code>/static/files&lt;/code>. One will contain all images to be used in different places of the website, while the other will have other files. If you want to have other files in your pages, such as videos, source-codes, or whatever, you can use this &lt;code>/static&lt;/code> folder to do so.&lt;/p>
&lt;p>Alright, we have our static folder with some files inside. My full folder structure is looking like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>/path/to/project/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-build.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-data.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-templates/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-about.html
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-base.html
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-teaching.html
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-static/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-images/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-files/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="the-return-of-the-build-script">The return of the build script&lt;/h2>
&lt;p>Now we have to modify our build script to copy the static files into the build folder. Otherwise, the webserver won&amp;rsquo;t be able to find them! Remember, when we serve the website, we point webserver to the &lt;code>/_site&lt;/code> folder, but the assets are outside. You could workaround it and make the server work with the files from outside the &lt;code>/_site&lt;/code> folder, but that&amp;rsquo;s just bad practice and we don&amp;rsquo;t need such a headache at this point.&lt;/p>
&lt;p>In the build script, modify to copy the &lt;code>/static&lt;/code> folder inside the &lt;code>/_site&lt;/code> folder:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>BUILD_DIR &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;_site&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>STATIC_DIR &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;static&amp;#39;&lt;/span> &lt;span style="color:#75715e"># Where the static assets are located&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CURRENT_PATH &lt;span style="color:#f92672">=&lt;/span> Path&lt;span style="color:#f92672">.&lt;/span>cwd()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>BUILD_PATH &lt;span style="color:#f92672">=&lt;/span> CURRENT_PATH &lt;span style="color:#f92672">/&lt;/span> Path(BUILD_DIR)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>STATIC_PATH &lt;span style="color:#f92672">=&lt;/span> CURRENT_PATH &lt;span style="color:#f92672">/&lt;/span> Path(STATIC_DIR)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># clean-up build folder&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> shutil&lt;span style="color:#f92672">.&lt;/span>rmtree(BUILD_PATH)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">except&lt;/span> &lt;span style="color:#a6e22e">FileNotFoundError&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Build dir does not exist yet.&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># The following command will create the directories if they don&amp;#39;t exist&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Thus, we don&amp;#39;t need `BUILD_PATH.mkdir(parents=True, exist_ok=True)` anymore&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>shutil&lt;span style="color:#f92672">.&lt;/span>copytree(STATIC_PATH, BUILD_PATH) &lt;span style="color:#75715e"># Copy the static folder to the build dir&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now that&amp;rsquo;s a bunch of weird stuff. Here&amp;rsquo;s what it does: first we declare a couple of useful constants, the build and the static folders. Then we try to delete the build dir. If this is the first time you run the build script, or if you deleted the build folder by hand, the script will print the message that the folder does not exist. Then it will copy all the contents from the static into the build folder.&lt;/p>
&lt;p>You could, and that&amp;rsquo;s totally doable, simply never delete the static folders that are in the build folder at all! Then you wouldn&amp;rsquo;t have to copy the static assets all the time. I just personally prefer it this way, always having a clean build of the website.&lt;/p>
&lt;h2 id="a-new-page">A new page&lt;/h2>
&lt;p>Ok, so the build script now deletes and copies all static files to the build directory every time. One thing missing though, the files themselves! For my website, it makes sense to provide files related to my research. For a student, it could be files related to class projects. Any type of file that I will use in any page of my website will go in the &lt;code>/static&lt;/code> folder.&lt;/p>
&lt;p>I will add the PDF files of my publications, those will go into the &lt;code>/static/files&lt;/code> folder. I will also add some images created over the years for these projects, those will go in the &lt;code>/static/images&lt;/code> folder.&lt;/p>
&lt;p>So&amp;hellip; I now decided that to use these static files, I will create a new page for my website, the &lt;code>/research/index.html&lt;/code> page. Naturally, I will create a template for this page in the &lt;code>/templates&lt;/code> folder and call it &lt;code>research.html&lt;/code>. In your case it could be a different name, like &lt;code>project.html&lt;/code>. My template will be a list of my research projects. Something like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>{% extends &amp;#39;base.html&amp;#39; %}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{% block content %}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;{{ title }}&amp;lt;/&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {% for project in projects %}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">a&lt;/span> &lt;span style="color:#a6e22e">href&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">/research/{{&lt;/span> &lt;span style="color:#a6e22e">project&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">.&lt;/span>&lt;span style="color:#a6e22e">slug&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">}}&lt;/span>&amp;gt;{{ project.name }}&amp;lt;/&lt;span style="color:#f92672">a&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">table&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">tr&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">td&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">img&lt;/span> &lt;span style="color:#a6e22e">src&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">{{&lt;/span> &lt;span style="color:#a6e22e">project&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">.&lt;/span>&lt;span style="color:#a6e22e">thumbnail&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">}}&lt;/span> &lt;span style="color:#a6e22e">width&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;200pt&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">td&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">td&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;{{ project.excerpt }}&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">td&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">tr&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">table&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {% endfor %}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{% endblock %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In a nutshell: I extend the base template so this page also includes the boilerplate stuff. This page will be expecting a list of &lt;code>projects&lt;/code>, and for each item in that list (a &lt;code>project&lt;/code>), it will output the &lt;code>project.name&lt;/code>, &lt;code>project.slug&lt;/code>, a short description with &lt;code>project.excerpt&lt;/code>, and an image, the &lt;code>project.thumbnail&lt;/code>. Just by looking at this template I can visualize how the research projects can be stored in my &lt;code>data.py&lt;/code> file.&lt;/p>
&lt;h2 id="the-data-manace">The data manace&lt;/h2>
&lt;p>Each research project will be a dictionary with those key values (&lt;code>name&lt;/code>, &lt;code>slug&lt;/code>, &lt;code>exerpt&lt;/code>, &lt;code>thumbnail&lt;/code>), and strings values. The &lt;code>name&lt;/code> will be the research proiject name (human readable), the &lt;code>slug&lt;/code> is a version of the name that looks pretty in the URL address and be used when creating the detail page for each project, not yet though. The exerpt is a short description of the project, and the &lt;code>thumbnail&lt;/code> which will be the path to an image that will be in the &lt;code>/static/images&lt;/code> folder. And all project dictionaries will be contained inside of a &lt;code>list&lt;/code> called &lt;code>research&lt;/code> in the &lt;code>data.py&lt;/code>.&lt;/p>
&lt;p>Let&amp;rsquo;s go ahead and add some stuff in our &lt;code>data.py&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>research &lt;span style="color:#f92672">=&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;name&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;My Awesome Research&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;slug&amp;#39;&lt;/span> : &lt;span style="color:#e6db74">&amp;#39;my-awesome-research&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;excerpt&amp;#39;&lt;/span> : &lt;span style="color:#e6db74">&amp;#39;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed aliquam lectus eget nisl iaculis, at maximus elit convallis. Donec mattis, sem et imperdiet convallis, leo enim tincidunt massa, non aliquam ante libero sollicitudin quam. Maecenas facilisis urna urna, sed malesuada diam facilisis sit amet.&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;thumbnail&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;/images/my-awesome-research-thumb.png&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;name&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;My Alright Research&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;slug&amp;#39;&lt;/span> : &lt;span style="color:#e6db74">&amp;#39;my-alright-research&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;excerpt&amp;#39;&lt;/span> : &lt;span style="color:#e6db74">&amp;#39;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed aliquam lectus eget nisl iaculis, at maximus elit convallis. Donec mattis, sem et imperdiet convallis, leo enim tincidunt massa, non aliquam ante libero sollicitudin quam. Maecenas facilisis urna urna, sed malesuada diam facilisis sit amet.&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;thumbnail&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;/images/my-alright-research-thumb.png&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Notice that the thumbnail value is not a full URL, it&amp;rsquo;s the relative path that the image will be once copied to the build folder. For example, if the source file is in: &lt;code>/path/to/project/static/images/my-alright-research-thumb.png&lt;/code>, after running the build script it will be copied to the build dir &lt;code>/path/to/project/_site/images/my-alright-research-thumb.png&lt;/code>. So in the &lt;code>data.py&lt;/code> I need to reflect that relative path to the build dir, not the original source folder.&lt;/p>
&lt;p>We are almost there, there&amp;rsquo;s one little detail that we need to take care of&amp;hellip;&lt;/p>
&lt;p>In the template, the address of the image file will be relative to the current URL. So when we visit the &lt;code>/research&lt;/code> page, and the URL to a resource is relative (it&amp;rsquo;s not a full address with &lt;code>https://&lt;/code>, it&amp;rsquo;s just a folder-like address), the resulting URL to the image, once the site is served, will be wrong (it will be &lt;code>http://127.0.0.1:8000/research/images/my-alright-research-thumb.png&lt;/code> and not &lt;code>http://127.0.0.1:8000/images/my-alright-research-thumb.png&lt;/code>), which naturally does not exist in the build folder. Two approaches to fix this:&lt;/p>
&lt;ol>
&lt;li>In the build script I can copy those files to a new folder &lt;code>/_site/research/images&lt;/code>&lt;/li>
&lt;li>Or define a &lt;code>BASE_URL&lt;/code> in the buildscript and use it in the templates.&lt;/li>
&lt;/ol>
&lt;p>I will be using 2.&lt;/p>
&lt;h2 id="the-rise-of-build-script">The rise of build script&lt;/h2>
&lt;p>First, don&amp;rsquo;t forget to import your data to the build script:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> store &lt;span style="color:#f92672">import&lt;/span> teaching, research
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the build script, define a constant BASE_URL:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>BASE_URL &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;http://127.0.0.8000&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And in each call to a &lt;code>render()&lt;/code> method, pass it to the template (I will add this to all other &lt;code>render()&lt;/code> calls as well, not just the &lt;code>research.html&lt;/code>, even if not used by template):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># /research&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>template &lt;span style="color:#f92672">=&lt;/span> env&lt;span style="color:#f92672">.&lt;/span>get_template(&lt;span style="color:#e6db74">&amp;#39;research.html&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>output &lt;span style="color:#f92672">=&lt;/span> template&lt;span style="color:#f92672">.&lt;/span>render(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BASE_URL&lt;span style="color:#f92672">=&lt;/span>BASE_URL,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> title&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Research&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> projects&lt;span style="color:#f92672">=&lt;/span>research
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>o &lt;span style="color:#f92672">=&lt;/span> BUILD_PATH &lt;span style="color:#f92672">/&lt;/span> Path(&lt;span style="color:#e6db74">&amp;#34;research&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>o&lt;span style="color:#f92672">.&lt;/span>mkdir(parents&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>, exist_ok&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>o &lt;span style="color:#f92672">=&lt;/span> o &lt;span style="color:#f92672">/&lt;/span> Path(&lt;span style="color:#e6db74">&amp;#39;index.html&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">with&lt;/span> o&lt;span style="color:#f92672">.&lt;/span>open(mode&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;w&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> fh:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fh&lt;span style="color:#f92672">.&lt;/span>write(output)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="the-template-awakens">The template awakens&lt;/h2>
&lt;p>Then in the template add &lt;code>{{ BASE_URL }}&lt;/code> in front of any linked asset:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">img&lt;/span> &lt;span style="color:#a6e22e">src&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{{ project.thumbnail }}&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">width&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;200pt&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Becomes:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">img&lt;/span> &lt;span style="color:#a6e22e">src&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{{ BASE_URL }}{{ project.thumbnail }}&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">width&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;200pt&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="your-turn-padawan">Your turn, Padawan&lt;/h2>
&lt;p>Go ahead and put images in the folder. Build and serve, see if it works for yourself:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>python build.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>python -m http.server --directory ./_site/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>In this post we:&lt;/p>
&lt;ul>
&lt;li>Created static assets the website will use&lt;/li>
&lt;li>Added the assets to the build script flow&lt;/li>
&lt;li>Added references to the static assets in the data store&lt;/li>
&lt;li>Created a template that linked to the static assets&lt;/li>
&lt;/ul></content></item><item><title>Pretty Urls</title><link>/posts/pretty-urls/</link><pubDate>Fri, 12 Nov 2021 00:00:01 -0500</pubDate><guid>/posts/pretty-urls/</guid><description>Table of content Table of content Previously The output folder and the URL Changing the output path Clean the house after playing Summary Previously In the last post we separated the data into its own separate file, the data.py. We modified the build script to load the data from this new file, and combine it with the templates to generate html pages in the build folder. In this post, we will change the build script to make the url that we type in the browser more convenient and intuitive, or &amp;ldquo;prettier&amp;rdquo;.</description><content>&lt;h2 id="table-of-content">Table of content&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="#table-of-content">Table of content&lt;/a>&lt;/li>
&lt;li>&lt;a href="#previously">Previously&lt;/a>&lt;/li>
&lt;li>&lt;a href="#the-output-folder-and-the-url">The output folder and the URL&lt;/a>&lt;/li>
&lt;li>&lt;a href="#changing-the-output-path">Changing the output path&lt;/a>&lt;/li>
&lt;li>&lt;a href="#clean-the-house-after-playing">Clean the house after playing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#summary">Summary&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="previously">Previously&lt;/h2>
&lt;p>In the last post we separated the data into its own separate file, the &lt;code>data.py&lt;/code>. We modified the build script to load the data from this new file, and combine it with the templates to generate html pages in the build folder. In this post, we will change the build script to make the url that we type in the browser more convenient and intuitive, or &amp;ldquo;prettier&amp;rdquo;.&lt;/p>
&lt;h2 id="the-output-folder-and-the-url">The output folder and the URL&lt;/h2>
&lt;p>Right now, the build script is generating files directly into the &lt;code>/_site&lt;/code> build directory. After building the pages, we can start the http server with the command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>python -m http.server --directory ./_site/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then, with the server running, I can checkout the pages in my browser by typing in the address bar &lt;code>localhost:8000&lt;/code>. And if I want to check out the &lt;code>teaching.html&lt;/code> page specifically, I can go to &lt;code>localhost:8000/teaching.html&lt;/code>. That&amp;rsquo;s cool and all, but we can do better.&lt;/p>
&lt;p>Most websites today will have pretty URLs, which are URL addresses that are easier for people in general to memorize. In our case, for example, instead of having that &lt;code>html&lt;/code> dangling on the back of the url, we could make the URL look like &lt;code>localhost:8000/teaching&lt;/code> which is much nicer to look at.&lt;/p>
&lt;p>If you ever dealt with some fancy framework like &lt;del>React&lt;/del>, &lt;del>Angular&lt;/del>, &lt;del>Vue&lt;/del>, or Svelte&amp;hellip; they require some substantial learning in order to make this pretty URLs happen. But we are going for fast and easy, right? All we need to know is that when you hit enter after typing an address in your browser, the webserver will look for specific files on the other side.&lt;/p>
&lt;p>For example, when you enter &lt;code>localhost:8000&lt;/code> your browser will ask the webserver for a webpage, which happens to be running on your own machine, you know, that &amp;ldquo;http server&amp;rdquo; from python. That webserver, because you configured it to point to the &lt;code>/_site&lt;/code> folder, will look for the pages to send back to the requesting browser. Now, here&amp;rsquo;s the thing, if the address is a folder-like address (&lt;code>localhost:8000&lt;/code> points to &lt;code>/_site&lt;/code>), then the webserver will, by default, look for an &lt;code>index.html&lt;/code> file in that folder, and return its contents to the browser. It&amp;rsquo;s the same as entering &lt;code>localhost:8000/index.html&lt;/code>.&lt;/p>
&lt;p>Why is this so important and revolutionary? Well, it&amp;rsquo;s not, but now that we know that, we can use that default behavior to our benefit. To have pretty URLs in our static website, all we have to do is create the paths as folders in our build directory, and create &lt;code>index.html&lt;/code> files for each of those sub folders.&lt;/p>
&lt;p>To give an example, in the &lt;code>/_site&lt;/code> folder we will have an &lt;code>index.html&lt;/code>, and that will be the front page of the website. Then we will have a subfolder &lt;code>/_site/teaching/&lt;/code> and inside that subfolder we will have an &lt;code>index.html&lt;/code>. Then when a request comes asking for the &lt;code>localhost:8000/teaching/&lt;/code>, the server will be forced to return back the &lt;code>index.html&lt;/code> file in that subfolder. All of this is to say, our output files will all be named &lt;code>index.html&lt;/code>, but they&amp;rsquo;ll each be placed inside a subfolder inside the &lt;code>/_site&lt;/code> build directory.&lt;/p>
&lt;p>The change will look something like this:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>From:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>/path/to/project/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-...other files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-_site/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-about.html
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-teaching.html
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>To:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>/path/to/project/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-...other files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-_site/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-about/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-index.html
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-teaching/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |index.html
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="changing-the-output-path">Changing the output path&lt;/h2>
&lt;p>That&amp;rsquo;s a lot of talking, let&amp;rsquo;s get our hands dirty. Let&amp;rsquo;s work on the &lt;code>build.py&lt;/code> script. More specifically the teaching part of the script. This is the current script:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>o &lt;span style="color:#f92672">=&lt;/span> Path&lt;span style="color:#f92672">.&lt;/span>cwd()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>o &lt;span style="color:#f92672">=&lt;/span> o &lt;span style="color:#f92672">/&lt;/span> Path(&lt;span style="color:#e6db74">&amp;#39;_site/teaching.html&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We will need to change it to look like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>o &lt;span style="color:#f92672">=&lt;/span> Path&lt;span style="color:#f92672">.&lt;/span>cwd()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>o &lt;span style="color:#f92672">=&lt;/span> o &lt;span style="color:#f92672">/&lt;/span> Path(&lt;span style="color:#e6db74">&amp;#34;_site/teaching&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>o&lt;span style="color:#f92672">.&lt;/span>mkdir(parents&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>, exist_ok&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>o &lt;span style="color:#f92672">=&lt;/span> o &lt;span style="color:#f92672">/&lt;/span> Path(&lt;span style="color:#e6db74">&amp;#39;index.html&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Notice how we break down the variable &amp;lsquo;o&amp;rsquo; a little bit. If we simply used the entire path to the &lt;code>index.html&lt;/code> (for example: &lt;code>o = Path(&amp;quot;_site/teaching/index.html&amp;quot;)&lt;/code>), then python would have crashed/raised an exception, because the subfolder &lt;code>/teaching&lt;/code> doesn&amp;rsquo;t exist. That&amp;rsquo;s why we have a call to &lt;code>o.mkdir(parents=True, exist_ok=True)&lt;/code> in between, which creates any folder in the path that doesn&amp;rsquo;t exist already.&lt;/p>
&lt;p>&lt;em>Note: if you call &lt;code>o.mkdir(parents=True, exist_ok=True)&lt;/code>, and the path ends with &lt;code>index.html&lt;/code>, it will treach that &lt;code>index.html&lt;/code> as a folder, and not a file.&lt;/em>&lt;/p>
&lt;p>Now when you run the build script (&lt;code>python build.py&lt;/code>), it will create the subfolder, and write to a file in there. Then, if you start the http server, and go to the url localhost:8000/teaching you will see the &lt;code>index.html&lt;/code> that&amp;rsquo;s inside that folder, and not the teaching.html file from before.&lt;/p>
&lt;h2 id="clean-the-house-after-playing">Clean the house after playing&lt;/h2>
&lt;p>Which brings me to the last part of this article. You see how the &lt;code>teaching.html&lt;/code> file is still hanging out in the build directory? In the build script, all we do is create new files, or overwrite existing ones! That&amp;rsquo;s not good enough&amp;hellip; we don&amp;rsquo;t want that old garbage files that we created for testing purposes from previous steps, right? What I&amp;rsquo;m going to do now is tell the build script to delete all files inside the build folder &lt;code>/_site&lt;/code> before I even start generating the pages.&lt;/p>
&lt;p>To do so, at the beginning of the build script, we will import another library that&amp;rsquo;s already included with python, the &lt;code>shutil&lt;/code>, it will help with deleting an entire folder and its content:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> shutil
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then let&amp;rsquo;s create a couple of constant variables, just because we use it all throughout the rest of the build script, so if I decide to change the build directory I can change it in one place and not all over the script:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>BUILD_DIR &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;_site&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CURRENT_PATH &lt;span style="color:#f92672">=&lt;/span> Path&lt;span style="color:#f92672">.&lt;/span>cwd()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>BUILD_PATH &lt;span style="color:#f92672">=&lt;/span> CURRENT_PATH &lt;span style="color:#f92672">/&lt;/span> Path(BUILD_DIR)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then we can go ahead and delete the &lt;code>/_site&lt;/code> from the project folder. Remember, this will be done everytime we run the build script, as part of the build process to clean up whatever the previous build was.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># remove current build&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> shutil&lt;span style="color:#f92672">.&lt;/span>rmtree(BUILD_PATH)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">except&lt;/span> &lt;span style="color:#a6e22e">FileNotFoundError&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Build dir does not exist (yet).&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And of course, now we need to recreate the build dir:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># make build dir&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>BUILD_PATH&lt;span style="color:#f92672">.&lt;/span>mkdir(parents&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>, exist_ok&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And now we will have a clean build every time we run the build script. The build script now will look like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> shutil
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> jinja2 &lt;span style="color:#f92672">import&lt;/span> Environment, FileSystemLoader
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> pathlib &lt;span style="color:#f92672">import&lt;/span> Path
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> data &lt;span style="color:#f92672">import&lt;/span> teaching
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>BUILD_DIR &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;_site&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CURRENT_PATH &lt;span style="color:#f92672">=&lt;/span> Path&lt;span style="color:#f92672">.&lt;/span>cwd()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>BUILD_PATH &lt;span style="color:#f92672">=&lt;/span> CURRENT_PATH &lt;span style="color:#f92672">/&lt;/span> Path(BUILD_DIR)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>file_loader &lt;span style="color:#f92672">=&lt;/span> FileSystemLoader(&lt;span style="color:#e6db74">&amp;#39;templates&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>env &lt;span style="color:#f92672">=&lt;/span> Environment(loader&lt;span style="color:#f92672">=&lt;/span>file_loader)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">About
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># /about.html&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>template &lt;span style="color:#f92672">=&lt;/span> env&lt;span style="color:#f92672">.&lt;/span>get_template(&lt;span style="color:#e6db74">&amp;#39;about.html&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>output &lt;span style="color:#f92672">=&lt;/span> template&lt;span style="color:#f92672">.&lt;/span>render(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> title&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;About&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>o &lt;span style="color:#f92672">=&lt;/span> BUILD_PATH &lt;span style="color:#f92672">/&lt;/span> Path(&lt;span style="color:#e6db74">&amp;#34;about&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>o&lt;span style="color:#f92672">.&lt;/span>mkdir(parents&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>, exist_ok&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>o &lt;span style="color:#f92672">=&lt;/span> o &lt;span style="color:#f92672">/&lt;/span> Path(&lt;span style="color:#e6db74">&amp;#39;index.html&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">with&lt;/span> o&lt;span style="color:#f92672">.&lt;/span>open(mode&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;w&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> fh:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fh&lt;span style="color:#f92672">.&lt;/span>write(output)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">Teaching
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># /teaching.html&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>template &lt;span style="color:#f92672">=&lt;/span> env&lt;span style="color:#f92672">.&lt;/span>get_template(&lt;span style="color:#e6db74">&amp;#39;teaching.html&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>output &lt;span style="color:#f92672">=&lt;/span> template&lt;span style="color:#f92672">.&lt;/span>render(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> title&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Teaching&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> universities&lt;span style="color:#f92672">=&lt;/span>teaching
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>o &lt;span style="color:#f92672">=&lt;/span> BUILD_PATH &lt;span style="color:#f92672">/&lt;/span> Path(&lt;span style="color:#e6db74">&amp;#34;teaching&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>o&lt;span style="color:#f92672">.&lt;/span>mkdir(parents&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>, exist_ok&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>o &lt;span style="color:#f92672">=&lt;/span> o &lt;span style="color:#f92672">/&lt;/span> Path(&lt;span style="color:#e6db74">&amp;#39;index.html&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">with&lt;/span> o&lt;span style="color:#f92672">.&lt;/span>open(mode&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;w&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> fh:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fh&lt;span style="color:#f92672">.&lt;/span>write(output)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, if you build and serve, you can navigate to the pretty URLs &lt;code>localhost:8000/teaching&lt;/code>.&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>In this article we:&lt;/p>
&lt;ul>
&lt;li>Created subfolders inside the build folder, one for each web page&lt;/li>
&lt;li>Modified the build script to output each page in a different subfolder&lt;/li>
&lt;li>Renamed all output files to &lt;code>index.html&lt;/code>, which the webserver look for by default if no file is specifically requested&lt;/li>
&lt;li>Ended up with prettier URLs while navigating the website&lt;/li>
&lt;/ul></content></item><item><title>Separating Data From the Rest</title><link>/posts/separating-data-from-the-rest/</link><pubDate>Thu, 11 Nov 2021 00:00:01 -0500</pubDate><guid>/posts/separating-data-from-the-rest/</guid><description>Table of content Table of content Recap Storytime Creating some data Reading the data Template loops Summary Recap Previously, we have seen how to use Jinja2&amp;rsquo;s template inheritance to build more consistent webpages. In this post, we will make our development process a little bit more productive (IMHO!) by separating the data from the other parts of the website.
If you have been following this tutorial series, you&amp;rsquo;ll notice that the content of the webpages are either hardcoded into the templates themselves, or into the build script when passing values to the template.</description><content>&lt;h2 id="table-of-content">Table of content&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="#table-of-content">Table of content&lt;/a>&lt;/li>
&lt;li>&lt;a href="#recap">Recap&lt;/a>&lt;/li>
&lt;li>&lt;a href="#storytime">Storytime&lt;/a>&lt;/li>
&lt;li>&lt;a href="#creating-some-data">Creating some data&lt;/a>&lt;/li>
&lt;li>&lt;a href="#reading-the-data">Reading the data&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#template-loops">Template loops&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#summary">Summary&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="recap">Recap&lt;/h2>
&lt;p>Previously, we have seen how to use Jinja2&amp;rsquo;s template inheritance to build more consistent webpages. In this post, we will make our development process a little bit more productive (IMHO!) by separating the data from the other parts of the website.&lt;/p>
&lt;p>If you have been following this tutorial series, you&amp;rsquo;ll notice that the content of the webpages are either hardcoded into the templates themselves, or into the build script when passing values to the template. It&amp;rsquo;s time to change that and give the data its own home.&lt;/p>
&lt;h2 id="storytime">Storytime&lt;/h2>
&lt;p>A quick look back and some motivation is in place before we roll up our sleeves and get to work&amp;hellip;&lt;/p>
&lt;p>Let&amp;rsquo;s look at what we have:&lt;/p>
&lt;ul>
&lt;li>a folder with a bunch of templates&lt;/li>
&lt;li>a python script that reads each template, changes a little bit, then spits out into the &lt;code>/_site&lt;/code> folder, the build folder&lt;/li>
&lt;/ul>
&lt;p>If you notice, it doesn&amp;rsquo;t really matter where our data comes from, right? Right now we have it coded into the build script (the &lt;code>title&lt;/code> that we pass to the template). But we also have some information directly in the template files (the text in the &lt;code>teaching.html&lt;/code> template):&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Source of &lt;code>teaching.html&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>{% extends &amp;#39;base.html&amp;#39; %}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{% block content %}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;{{ title }}&amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;Southeastern Louisiana University&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">ul&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">li&lt;/span>&amp;gt;Algorithm Design and Implementation II (CMPS 280) Spring 2020&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">li&lt;/span>&amp;gt;Special Topics in Information Technology (CMPS 494/594) Spring 2020&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">ul&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;University of Nevada-Reno&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">ul&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">li&lt;/span>&amp;gt;Computer Communication Networks (CPE 400/600) Spring 2019&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">ul&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{% endblock %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Snippet from `build.py:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>template &lt;span style="color:#f92672">=&lt;/span> env&lt;span style="color:#f92672">.&lt;/span>get_template(&lt;span style="color:#e6db74">&amp;#39;about.html&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>output &lt;span style="color:#f92672">=&lt;/span> template&lt;span style="color:#f92672">.&lt;/span>render(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> title&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;ABOUT ME&amp;#34;&lt;/span> &lt;span style="color:#75715e"># Data `title` being passed to the template by the script&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>If we are dealing with a couple of pages, sure, that can be manageable. But if there are several different pages, it can be quite annoying to have the information scattered throughout multiple different types of files.&lt;/p>
&lt;p>But hey, we are using python and python can be modular. We can import python files from other python files!&lt;/p>
&lt;p>Instead of having it all in the build script or template files, we can create python file that the only purpose is to store the data for our website. I want to say that again: it doesn&amp;rsquo;t matter where your data comes from as long as we have access to it in our build script. You can have a database that you read from, you can crawl the web for the data.. If you can make the data into the build script somehow, you can pass it to the template to generate the final static pages.&lt;/p>
&lt;p>For our intent and purpose, we will not be dealing with any database, any web crawler whatsoever. It&amp;rsquo;s a simple static website after all, so we don&amp;rsquo;t need a complex database server. We will use a separate python file where we will dump all of the information that will displayed in the website.&lt;/p>
&lt;p>So without further ado, let&amp;rsquo;s create a data file named &lt;code>data.py&lt;/code> and put it in the same folder as the &lt;code>build.py&lt;/code> script if you haven&amp;rsquo;t already done it.&lt;/p>
&lt;h2 id="creating-some-data">Creating some data&lt;/h2>
&lt;p>So what does this data &amp;ldquo;store&amp;rdquo; look like? Data structures!&lt;/p>
&lt;p>Most of the dynamic content that you see on the Internet are stored in tables. Well in python we don&amp;rsquo;t have tables per se, but we have other things, like lists (&lt;code>list&lt;/code>) and dictionaries (&lt;code>dict&lt;/code>), and that&amp;rsquo;s what we will be using to store the content. Which stuff should go on the datastore you ask? Well, let&amp;rsquo;s take a look at what we have so far. In my case I&amp;rsquo;m going to look at the &lt;code>teaching.html&lt;/code> template, which has the following in the &lt;code>{% block content %}&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;Southeastern Louisiana University&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">ul&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">li&lt;/span>&amp;gt;Algorithm Design and Implementation II (CMPS 280) Spring 2020&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">li&lt;/span>&amp;gt;Special Topics in Information Technology (CMPS 494/594) Spring 2020&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">ul&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;University of Nevada-Reno&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">ul&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">li&lt;/span>&amp;gt;Computer Communication Networks (CPE 400/600) Spring 2019&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">ul&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you notice, there&amp;rsquo;s a pattern there, I have a list of courses, and that list is associated with the university where I taught it. And each course also has a list of semesters when I taught them.&lt;/p>
&lt;p>There are a couple of directions I can take with this, but I&amp;rsquo;m going to keep it simple for now. However, in the future, changing the structure of the data can be easy, we just have to be savvy with how python works with it in the build script.&lt;/p>
&lt;p>In my data file, I&amp;rsquo;ll create a variable called &lt;code>teaching&lt;/code>, this will be a list of dictionaries. Let&amp;rsquo;s take a look at how it looks like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>teaching &lt;span style="color:#f92672">=&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;name&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;Southeastern Louisiana University&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;courses&amp;#39;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Algorithm Design and Implementation II (CMPS 280) Spring 2020&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Special Topics in Information Technology (CMPS 494/594) Spring 2020&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Advanced Computer Networks (CMPS 161) Fall 2019&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Introduction to Applied Networking (CMPS 209) Fall 2019&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Algorithm Design and Implementation I (CMPS 161) Fall 2019&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;name&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;University of Nevada, Reno&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;courses&amp;#39;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Computer Communication Networks (CPE 400/600) Spring 2019&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Each item in the teaching list will be a dictionary. And each dictionary will follow this pattern that I decided: each &lt;code>dict&lt;/code> will have an key called &lt;code>&amp;quot;name&amp;quot;&lt;/code> and the value will be the place where I taught the courses; each dictionary will then have yet another &lt;code>list&lt;/code> of strings, in the key &lt;code>&amp;quot;courses&amp;quot;&lt;/code>. Each string will be a course. And I will format this string the way that I want to see printed in the built page. This type of structured data looks a lot more like a &lt;code>json&lt;/code> object, right? If you had this data in a sql database, you might have to deal with &lt;code>JOIN&lt;/code> queries. I&amp;rsquo;m not saying that&amp;rsquo;s not possible, but for my tiny personal website, this is more than enough.&lt;/p>
&lt;h2 id="reading-the-data">Reading the data&lt;/h2>
&lt;p>Now that I have some data, I need to use it. Let&amp;rsquo;s go to the &lt;code>build.py&lt;/code> script. At the top we need to load the data from the newly created &lt;code>data.py&lt;/code> file. We can do that like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> data &lt;span style="color:#f92672">import&lt;/span> teaching
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Notice that for any new data structure I add to the data store file, I can then import it by adding to that same &lt;code>import&lt;/code> statement, just separate it with comma (&lt;code>,&lt;/code>), like &lt;code>from data import teaching, research_projects&lt;/code>.&lt;/p>
&lt;p>Now in the &lt;code>render()&lt;/code> call of the teaching page, I can pass the &lt;code>teaching&lt;/code> list to the template:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>template &lt;span style="color:#f92672">=&lt;/span> env&lt;span style="color:#f92672">.&lt;/span>get_template(&lt;span style="color:#e6db74">&amp;#39;teaching.html&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>output &lt;span style="color:#f92672">=&lt;/span> template&lt;span style="color:#f92672">.&lt;/span>render(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> title&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Teaching&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> universities&lt;span style="color:#f92672">=&lt;/span>teaching
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Notice that the name of the list and the parameter used by the template do not have to match. In this case, the template will be looking for the parameter called &lt;code>universities&lt;/code> and not &lt;code>teaching&lt;/code>. Speaking of templates, we have some work to do over there too.&lt;/p>
&lt;p>Move over to the &lt;code>teaching.html&lt;/code> template. We have to modify our template so it reads the values being passed to it, instead of printing the hard-coded ones.&lt;/p>
&lt;h3 id="template-loops">Template loops&lt;/h3>
&lt;p>It&amp;rsquo;s time to learn another feature of jinja, the loops. If you have some experience with python, you will find this very intuitive. It&amp;rsquo;s like a way of having a for loop inside the template. It may seem odd that we mix python code with html code, but this thing works wonders with lists. The template doesn&amp;rsquo;t know how many courses I taught, so a &lt;code>loop&lt;/code> is the perfect way of dealing with this.&lt;/p>
&lt;p>In the template, let&amp;rsquo;s make it more generic and remove all the hard coded stuff. Then add the loop blocks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>{% extends &amp;#39;base.html&amp;#39; %}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{% block content %}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;{{ title }}&amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {% for university in universities %}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;{{ university.name }}&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">ul&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {% for course in university.courses %}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">li&lt;/span>&amp;gt;{{ course }}&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {% endfor %}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">ul&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {% endfor %}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{% endblock %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It is a generalized template that we created from the hard-coded one, right? Well, look at that, we can have nested loops in the template, and that works just fine. The syntax is very similar to the python syntax. The main difference is that we need the &lt;code>{% endfor %}&lt;/code> block to tell jinja which part of the &lt;code>html&lt;/code> code will repeat and when to stop the repetition. We can access the inner fields using the dot-notation&lt;/p>
&lt;p>Now all that&amp;rsquo;s left to do is run the build script and checkout the generated webpages:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>python built.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>python3 -m http.server --directory ./_site
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then navigate in your browser to &lt;code>localhost:8000/teaching.html&lt;/code>, &lt;em>Ta-Da&lt;/em>!&lt;/p>
&lt;p>
&lt;p>
&lt;picture>
&lt;source media="(max-width: 376px)"
srcset="">
&lt;source media="(max-width: 992px)"
srcset="">
&lt;source media="(max-width: 1400px)"
srcset="">
&lt;source media="(min-width: 1600px)"
srcset="/posts/separating-data-from-the-rest/images/Screen_Shot_2021_11_11_at_11_19_23_bb658d57f2_hu2301602a29be7ec7ca5ea683d9dcedeb_107638_500x0_resize_box_3.png">
&lt;img alt="Serving the website" title="Serving the website" src="images/Screen_Shot_2021_11_11_at_11_19_23_bb658d57f2.png">
&lt;/picture>
&lt;/p>
&lt;/p>
&lt;p>You can use the for loops just like you would in the python code. They are great for tabular data like this courses example.&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>Here&amp;rsquo;s a summary of what we did:&lt;/p>
&lt;ul>
&lt;li>Created data structures in a separate file &lt;code>data.py&lt;/code>&lt;/li>
&lt;li>Populated the data structure lists with actual useful data&lt;/li>
&lt;li>Imported the data in the &lt;code>build.py&lt;/code> script&lt;/li>
&lt;li>Injected the data into the template through the template engine&lt;/li>
&lt;li>Rendered pages by combining templates and data&lt;/li>
&lt;/ul></content></item><item><title>Creating Templates</title><link>/posts/creating-templates/</link><pubDate>Tue, 09 Nov 2021 00:00:01 -0500</pubDate><guid>/posts/creating-templates/</guid><description>Table of content Table of content Recap Jinja2 templates Template inheritance Summary Recap So far, we have a simple build script that takes in a template filename, and spits out the exact file into a different folder, not that useful I must confess.
In this post, we will go one step further in our static website development. We will create 2 new pages, the About, and the Teaching pages. I&amp;rsquo;m a professor, so it makes sense for me to create a page that lists all the courses I have taught in my career so far.</description><content>&lt;h2 id="table-of-content">Table of content&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="#table-of-content">Table of content&lt;/a>&lt;/li>
&lt;li>&lt;a href="#recap">Recap&lt;/a>&lt;/li>
&lt;li>&lt;a href="#jinja2-templates">Jinja2 templates&lt;/a>&lt;/li>
&lt;li>&lt;a href="#template-inheritance">Template inheritance&lt;/a>&lt;/li>
&lt;li>&lt;a href="#summary">Summary&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="recap">Recap&lt;/h2>
&lt;p>So far, we have a simple build script that takes in a template filename, and spits out the exact file into a different folder, not that useful I must confess.&lt;/p>
&lt;p>In this post, we will go one step further in our static website development. We will create 2 new pages, the &lt;code>About&lt;/code>, and the &lt;code>Teaching&lt;/code> pages. I&amp;rsquo;m a professor, so it makes sense for me to create a page that lists all the courses I have taught in my career so far. And the about page, well, is the about page, you can put anything about yourself in there.&lt;/p>
&lt;h2 id="jinja2-templates">Jinja2 templates&lt;/h2>
&lt;p>Before we get started, we need to learn a little bit about how &lt;code>Jinja2&lt;/code> works. If you&amp;rsquo;ve been following along, you&amp;rsquo;ll remember that we created one single template, the &lt;code>hello.html&lt;/code>, and we used &lt;code>jinja&lt;/code> to create the &lt;code>index.html&lt;/code> by injecting a variable into the template. That is the main idea of a templating engine, you create a template with some placeholders, and then when you build the pages you pass the actual values that will be printed out where the placeholders are.&lt;/p>
&lt;p>Well, that&amp;rsquo;s nice, but what you&amp;rsquo;ll notice is that when you create new templates for pages in your website, you&amp;rsquo;ll have a bunch of repetitive boilerplate &lt;code>html&lt;/code> code scattered throughout your files.&lt;/p>
&lt;p>Let&amp;rsquo;s have a quick example. Create a new &lt;code>html&lt;/code> file and name it &lt;code>about.html&lt;/code>. Then create the html template as you want. This is mine:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">title&lt;/span>&amp;gt;About&amp;lt;/&lt;span style="color:#f92672">title&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;About&amp;lt;/&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;I am a professor at Southeastern Louisiana University in the Computer Science department.&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There are currently no variables in the template. That&amp;rsquo;s because I personally like to visualize the page before I start passing variables to it.&lt;/p>
&lt;p>Now I will create another template, the &lt;code>teaching.html&lt;/code>. For me, a professor, it makes sense to list the courses I have taught, so that&amp;rsquo;s what this template is for. It looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">title&lt;/span>&amp;gt;Teaching&amp;lt;/&lt;span style="color:#f92672">title&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;Teaching&amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;Southeastern Louisiana University&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">ul&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">li&lt;/span>&amp;gt;Algorithm Design and Implementation II (CMPS 280) Spring 2020&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">li&lt;/span>&amp;gt;Special Topics in Information Technology (CMPS 494/594) Spring 2020&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">ul&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;University of Nevada-Reno&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">ul&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">li&lt;/span>&amp;gt;Computer Communication Networks (CPE 400/600) Spring 2019&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">ul&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now I need to modify my build script so I can output these 2 pages. First, I don&amp;rsquo;t need the &lt;code>hello.html&lt;/code> template anymore, that was just to show the hello world example. I&amp;rsquo;m just gonna go ahead and delete it. Now I can change the build script so instead of rendering the hello example, I render the about page and the teaching page:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">About
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># /about.html&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>template &lt;span style="color:#f92672">=&lt;/span> env&lt;span style="color:#f92672">.&lt;/span>get_template(&lt;span style="color:#e6db74">&amp;#39;about.html&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>output &lt;span style="color:#f92672">=&lt;/span> template&lt;span style="color:#f92672">.&lt;/span>render()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>o &lt;span style="color:#f92672">=&lt;/span> Path&lt;span style="color:#f92672">.&lt;/span>cwd()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>o &lt;span style="color:#f92672">=&lt;/span> o &lt;span style="color:#f92672">/&lt;/span> Path(&lt;span style="color:#e6db74">&amp;#39;_site/about.html&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">with&lt;/span> o&lt;span style="color:#f92672">.&lt;/span>open(mode&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;w&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> fh:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fh&lt;span style="color:#f92672">.&lt;/span>write(output)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">Teaching
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># /teaching.html&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>template &lt;span style="color:#f92672">=&lt;/span> env&lt;span style="color:#f92672">.&lt;/span>get_template(&lt;span style="color:#e6db74">&amp;#39;teaching.html&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>output &lt;span style="color:#f92672">=&lt;/span> template&lt;span style="color:#f92672">.&lt;/span>render()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>o &lt;span style="color:#f92672">=&lt;/span> Path&lt;span style="color:#f92672">.&lt;/span>cwd()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>o &lt;span style="color:#f92672">=&lt;/span> o &lt;span style="color:#f92672">/&lt;/span> Path(&lt;span style="color:#e6db74">&amp;#39;_site/teaching.html&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">with&lt;/span> o&lt;span style="color:#f92672">.&lt;/span>open(mode&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;w&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> fh:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fh&lt;span style="color:#f92672">.&lt;/span>write(output)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now when I run the build script, I will see &lt;code>2&lt;/code> files in the &lt;code>/_site&lt;/code> folder&amp;hellip; Oops, I actually see 3, the &lt;code>index.html&lt;/code> file, from the hello example is still there! I need to delete it, but I&amp;rsquo;ll deal with it later. Let&amp;rsquo;s checkout the newly rendered pages. Remember you can spin up using python with &lt;code>python3 -m http.server --directory ./_site/&lt;/code> from the terminal inside your project folder.&lt;/p>
&lt;p>
&lt;p>
&lt;picture>
&lt;source media="(max-width: 376px)"
srcset="">
&lt;source media="(max-width: 992px)"
srcset="">
&lt;source media="(max-width: 1400px)"
srcset="">
&lt;source media="(min-width: 1600px)"
srcset="/posts/creating-templates/images/Screen_Shot_2021_11_09_at_13_52_45_d3964349a4_hudab7d86a5472e249896f085d55b737a9_63108_800x0_resize_box_3.png">
&lt;img alt="The index page at localhost:8000" title="The index page at localhost:8000" src="images/Screen_Shot_2021_11_09_at_13_52_45_d3964349a4.png">
&lt;/picture>
&lt;/p>
&lt;p>
&lt;picture>
&lt;source media="(max-width: 376px)"
srcset="">
&lt;source media="(max-width: 992px)"
srcset="">
&lt;source media="(max-width: 1400px)"
srcset="">
&lt;source media="(min-width: 1600px)"
srcset="/posts/creating-templates/images/Screen_Shot_2021_11_09_at_13_52_51_552c69e5a2_hu5e7efedfe416e431117ee87eb09ac78c_61112_800x0_resize_box_3.png">
&lt;img alt="About page at localhost:8000/about.html" title="About page at localhost:8000/about.html" src="images/Screen_Shot_2021_11_09_at_13_52_51_552c69e5a2.png">
&lt;/picture>
&lt;/p>
&lt;p>
&lt;picture>
&lt;source media="(max-width: 376px)"
srcset="">
&lt;source media="(max-width: 992px)"
srcset="">
&lt;source media="(max-width: 1400px)"
srcset="">
&lt;source media="(min-width: 1600px)"
srcset="/posts/creating-templates/images/Screen_Shot_2021_11_09_at_13_52_56_a187b02fff_hu5a4d7683d7fb5a03ca32ce4fe369b75c_79060_800x0_resize_box_3.png">
&lt;img alt="Teaching page at localhost:8000/teaching.html" title="Teaching page at localhost:8000/teaching.html" src="images/Screen_Shot_2021_11_09_at_13_52_56_a187b02fff.png">
&lt;/picture>
&lt;/p>
&lt;/p>
&lt;p>Awesome, it&amp;rsquo;s working! We will deal with the awkward index page in a different post.&lt;/p>
&lt;p>Now back to the templates. If you notice there are some repetitive &lt;code>html&lt;/code> tags that we had to put in both files, for example, the &lt;code>&amp;lt;html&amp;gt;&lt;/code>, &lt;code>&amp;lt;head&amp;gt;&lt;/code> and &lt;code>&amp;lt;body&amp;gt;&lt;/code> tags. For these couple of pages that&amp;rsquo;s absolutely alright, but imagine if your website has more pages. Maybe you&amp;rsquo;ll have a blog page, then a projects page&amp;hellip; the more pages you create, the more you will have to remember to edit if you want to change. For example, the title formatting, or the font of the entire website; you&amp;rsquo;d have to open each template, and make the exact same edit in each of them. &lt;strong>We can do better!&lt;/strong>&lt;/p>
&lt;p>Luckily, we can use Jinja&amp;rsquo;s awesome engine to the rescue!&lt;/p>
&lt;h2 id="template-inheritance">Template inheritance&lt;/h2>
&lt;p>Jinja provides template inheritance, which is a fancy way of using a template inside of another template. We can use it to create a &lt;strong>base layout&lt;/strong> file that centralizes all of the boilerplate code. If you want to learn more about Jinja, you can check their &lt;a href="https://jinja.palletsprojects.com">website&lt;/a>. In this tutorial series, we only use a handful of its features.&lt;/p>
&lt;p>Let&amp;rsquo;s go ahead and create our base template file, call it &lt;code>base.html&lt;/code> because we don&amp;rsquo;t need to make things complicated for ourselves, right? The base template will look like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">title&lt;/span>&amp;gt;{{ title }}&amp;lt;/&lt;span style="color:#f92672">title&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {% block content %}{% endblock %}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Oh gosh there&amp;rsquo;s a lot going on here! What is this monster? Let&amp;rsquo;s break it down. We added &lt;code>2&lt;/code> placeholders:&lt;/p>
&lt;ul>
&lt;li>The &lt;code>{{ title }}&lt;/code>, that we can directly pass to the template as an attribute (more in a little bit)&lt;/li>
&lt;li>The content block &lt;code>{% block content %}{% endblock %}&lt;/code> that jinja will use in the inheritance scheme&lt;/li>
&lt;/ul>
&lt;p>We will never use the base template to render directly, but we will use it to design our other template pages. Let&amp;rsquo;s go back to the &lt;code>about.html&lt;/code> template. Now instead of all of those tags, we can edit to look like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>{% extends &amp;#39;base.html&amp;#39; %}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{% block content %}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;{{ title }}&amp;lt;/&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;I am a professor at Southeastern Louisiana University in the Computer Science department.&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{% endblock %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>What jinja will do is it will render the about page by first reading the base template, because that&amp;rsquo;s what the about is extending with &lt;code>{% extends 'base.html' %}&lt;/code>. In object oriented programming terms, &lt;code>about.html&lt;/code> is a subclass of the &lt;code>base.html&lt;/code> template. And we are overriding the content block of the &lt;code>base.html&lt;/code> with the about template one! Go ahead and run the build script: &lt;code>python build.py&lt;/code>&lt;/p>
&lt;p>The output will look exactly the same as before. However, as we scale up and create more subpages for the website, if we decide to change something like the CSS for the entire website, we can do it in one place, instead of changing it in every single template out there.&lt;/p>
&lt;p>I did forget one thing, though&amp;hellip;
Now that the &lt;code>&amp;lt;title&amp;gt;&lt;/code> tag has a placeholder in it, I need to tel jinja what that title attribute should be. It&amp;rsquo;s a simple fix in the build script, just change the &lt;code>render()&lt;/code> call to pass the &lt;code>title&lt;/code> attribute to it:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>template &lt;span style="color:#f92672">=&lt;/span> env&lt;span style="color:#f92672">.&lt;/span>get_template(&lt;span style="color:#e6db74">&amp;#39;about.html&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>output &lt;span style="color:#f92672">=&lt;/span> template&lt;span style="color:#f92672">.&lt;/span>render(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> title&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;ABOUT ME&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, can I edit the &lt;code>teaching.html&lt;/code> to extend the &lt;code>base.html&lt;/code> template in a similar way? Go ahead and give it a try before continuing! Next, I&amp;rsquo;ll show my new teaching template looks like after the changes:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>{% extends &amp;#39;base.html&amp;#39; %}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{% block content %}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;{{ title }}&amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;Southeastern Louisiana University&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">ul&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">li&lt;/span>&amp;gt;Algorithm Design and Implementation II (CMPS 280) Spring 2020&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">li&lt;/span>&amp;gt;Special Topics in Information Technology (CMPS 494/594) Spring 2020&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">ul&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;University of Nevada-Reno&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">ul&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">li&lt;/span>&amp;gt;Computer Communication Networks (CPE 400/600) Spring 2019&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">ul&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{% endblock %}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Phew! That was a lot. But hopefully now you have a better understanding of how you can design your templates in a way that saves you from doing repetitive work in the future. We are one step further in our static website creation. We created &lt;code>2&lt;/code> new pages using different jinja templates.&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>In this post, we:&lt;/p>
&lt;ul>
&lt;li>Created 2 templates, each for a different subpage in the website&lt;/li>
&lt;li>Used the templates in the build script to create different static webpages&lt;/li>
&lt;li>Used Jinja2 template inheritance&lt;/li>
&lt;/ul></content></item><item><title>Hello Website</title><link>/posts/hello-website/</link><pubDate>Thu, 04 Nov 2021 00:00:01 -0500</pubDate><guid>/posts/hello-website/</guid><description>Table of content Table of content Recap Create a template Updating the build script Serve the website with a proper webserver Summary Recap We have set up our development environment on our own computer, now it&amp;rsquo;s time to build something useful. In this post, we will build our first static page using python, an html template, and we will also serve the website locally.
Create a template To start, let&amp;rsquo;s create a file in the /templates folder and call it hello.</description><content>&lt;h2 id="table-of-content">Table of content&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="#table-of-content">Table of content&lt;/a>&lt;/li>
&lt;li>&lt;a href="#recap">Recap&lt;/a>&lt;/li>
&lt;li>&lt;a href="#create-a-template">Create a template&lt;/a>&lt;/li>
&lt;li>&lt;a href="#updating-the-build-script">Updating the build script&lt;/a>&lt;/li>
&lt;li>&lt;a href="#serve-the-website-with-a-proper-webserver">Serve the website with a proper webserver&lt;/a>&lt;/li>
&lt;li>&lt;a href="#summary">Summary&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="recap">Recap&lt;/h2>
&lt;p>We have set up our development environment on our own computer, now it&amp;rsquo;s time to build something useful. In this post, we will build our first static page using &lt;code>python&lt;/code>, an &lt;code>html&lt;/code> template, and we will also serve the website locally.&lt;/p>
&lt;h2 id="create-a-template">Create a template&lt;/h2>
&lt;p>To start, let&amp;rsquo;s create a file in the &lt;code>/templates&lt;/code> folder and call it &lt;code>hello.html&lt;/code>. Now let&amp;rsquo;s put some very basic html:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Hello world!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>That&amp;rsquo;s it. Nothing fancy here!&lt;/p>
&lt;h2 id="updating-the-build-script">Updating the build script&lt;/h2>
&lt;p>&lt;em>At this point, it&amp;rsquo;s worth mentioning that the workflow that we are about to create will not change. So even though these first examples will look super simplistic, the way that you will make your pages will feel very similar.&lt;/em>&lt;/p>
&lt;p>Now let&amp;rsquo;s go to the &lt;code>build.py&lt;/code> script. In the build script, the first thing we need to do is import the jinja engine so add the import to the top. We will also use the &lt;code>pathlib&lt;/code> library that should already be available to you with &lt;code>python 3&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> jinja2 &lt;span style="color:#f92672">import&lt;/span> Environment, FileSystemLoader
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> pathlib &lt;span style="color:#f92672">import&lt;/span> Path
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We will use the &lt;code>FileSystemLoader&lt;/code> to point to a folder that contains all the template files. It makes our life easier so we don&amp;rsquo;t have to open the files and parse them ourselves. The &lt;code>Environment&lt;/code> class will let us load the templates by passing the filename of the template, that of course is inside the &lt;code>/templates&lt;/code> folder:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>file_loader &lt;span style="color:#f92672">=&lt;/span> FileSystemLoader(&lt;span style="color:#e6db74">&amp;#39;templates&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>env &lt;span style="color:#f92672">=&lt;/span> Environment(loader&lt;span style="color:#f92672">=&lt;/span>file_loader)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>template &lt;span style="color:#f92672">=&lt;/span> env&lt;span style="color:#f92672">.&lt;/span>get_template(&lt;span style="color:#e6db74">&amp;#39;hello.html&amp;#39;&lt;/span>) &lt;span style="color:#75715e"># tell jinja to load the template &amp;#34;hello.html&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>output &lt;span style="color:#f92672">=&lt;/span> template&lt;span style="color:#f92672">.&lt;/span>render() &lt;span style="color:#75715e"># generates the html code as a string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>o &lt;span style="color:#f92672">=&lt;/span> Path&lt;span style="color:#f92672">.&lt;/span>cwd() &lt;span style="color:#75715e"># get the current directory of the build script&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>o &lt;span style="color:#f92672">=&lt;/span> o &lt;span style="color:#f92672">/&lt;/span> Path(&lt;span style="color:#e6db74">&amp;#39;index.html&amp;#39;&lt;/span>) &lt;span style="color:#75715e"># append the output filename to the path&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">with&lt;/span> o&lt;span style="color:#f92672">.&lt;/span>open(mode&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;w&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> fh: &lt;span style="color:#75715e"># open de output file represented by the Path object &amp;#39;o&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fh&lt;span style="color:#f92672">.&lt;/span>write(output) &lt;span style="color:#75715e"># write the generated html code into the file&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Save the build script. Now go to the terminal and run it (don&amp;rsquo;t forget you have to CD to the folder of your project):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cd /path/to/project/folder
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>python build.py
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If everything goes smoothly, you should see a new file in your project folder, named &lt;code>**index**.html&lt;/code>! If you open the file, you will notice that it looks exactly like the template &lt;code>**hello**.html&lt;/code>, and that&amp;rsquo;s not fun at all. Let&amp;rsquo;s change that!&lt;/p>
&lt;p>Edit the template hello.html to look like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Hello **{{ name }}**!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And in the build script you only edit one line, the &lt;code>render()&lt;/code> method that Jinja uses to generate the &lt;code>html&lt;/code> markup:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>output &lt;span style="color:#f92672">=&lt;/span> template&lt;span style="color:#f92672">.&lt;/span>render(name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Harry Potter&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now run the build command again: &lt;code>python build.py&lt;/code>&lt;/p>
&lt;p>Wow! Now if you open the &lt;code>index.html&lt;/code> file you will see Harry&amp;rsquo;s name there! That&amp;rsquo;s pretty cool if you ask me.&lt;/p>
&lt;p>But it&amp;rsquo;s a little annoying that the built &lt;code>index.html&lt;/code> is mixed in the project folder, let&amp;rsquo;s instead, write to our build directory &lt;code>/_site&lt;/code>. You can name it whatever you want, but I&amp;rsquo;m used to this underscore site pattern so I&amp;rsquo;ll stick to it.&lt;/p>
&lt;p>In the build script edit so the &lt;code>o&lt;/code> variable looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>o &lt;span style="color:#f92672">=&lt;/span> o &lt;span style="color:#f92672">/&lt;/span> Path(&lt;span style="color:#e6db74">&amp;#39;_site/index.html&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will create a path the points to the build dir &lt;code>/_site&lt;/code>. Run the build command. Now the file is generated in the subfolder. Awesome, this way we don&amp;rsquo;t have to worry trying to figure out which &lt;code>html&lt;/code> files are used as a template and which are generated pages. All files in the &lt;code>/_site&lt;/code> subfolder will be considered the final product!&lt;/p>
&lt;h2 id="serve-the-website-with-a-proper-webserver">Serve the website with a proper webserver&lt;/h2>
&lt;p>As of now we haven&amp;rsquo;t really &lt;strong>SERVED&lt;/strong> our website, we were simply opening the &lt;code>html&lt;/code> files with whatever program we wanted like a text editor or a browser. Now that our build files are all centralized in a single folder, we can spin up an HTTP server that points to the &lt;code>/_site&lt;/code> folder.&lt;/p>
&lt;p>Luckily, &lt;code>python&lt;/code> comes with a very simple server that gets the job done, very useful in development mode. In your terminal, after generating the &lt;code>html&lt;/code> files in the build directory, run this command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>python -m http.server --directory ./_site/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Note python 2 has a similar command: &lt;code>python -m SimpleHTTPServer&lt;/code> but you will need to &lt;code>cd /_site/&lt;/code> first.&lt;/em>&lt;/p>
&lt;p>This command will start python&amp;rsquo;s built-in http server pointing to the &lt;code>/_site&lt;/code> folder. Now move to your browser and enter &lt;code>127.0.0.1:8000&lt;/code> in the address bar, that&amp;rsquo;s your localhost address. And the server by default uses port &lt;code>8000&lt;/code>, so we need that too.&lt;/p>
&lt;p>Ta-Da! Now we have a fully functional website. How exciting! Even though the end product is very minimalist, to be polite, it helps to figure out the development workflow of building and serving. We will build upon this process to personalize the website further.&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>In this post, we saw how to create a simple jinja2 template. We also use the built-in python http server to serve the website locally.&lt;/p>
&lt;ul>
&lt;li>Summarizing, in this video we:&lt;/li>
&lt;li>Created a template file&lt;/li>
&lt;li>Loaded the template engine in the build script&lt;/li>
&lt;li>Used the template file to create a static page&lt;/li>
&lt;li>Served the website using an http server&lt;/li>
&lt;/ul></content></item><item><title>Setting Up Your Development Environment</title><link>/posts/setting-up-your-development-environment/</link><pubDate>Tue, 02 Nov 2021 00:00:01 -0500</pubDate><guid>/posts/setting-up-your-development-environment/</guid><description>Table of content Table of content Recap First steps Project structure Folder build.py data.py _site/ templates/ Jinja2 Summary Recap This is the first post of the static website development series in which I&amp;rsquo;ll walk over the process of building a static portfolio website. In this post, we will set up our project on our local computer. So let&amp;rsquo;s get to it.
First steps First of all, we will be using python to create our website.</description><content>&lt;h2 id="table-of-content">Table of content&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="#table-of-content">Table of content&lt;/a>&lt;/li>
&lt;li>&lt;a href="#recap">Recap&lt;/a>&lt;/li>
&lt;li>&lt;a href="#first-steps">First steps&lt;/a>&lt;/li>
&lt;li>&lt;a href="#project-structure">Project structure&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#folder">Folder&lt;/a>&lt;/li>
&lt;li>&lt;a href="#buildpy">&lt;code>build.py&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#datapy">&lt;code>data.py&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#_site">&lt;code>_site/&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#templates">&lt;code>templates/&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#jinja2">Jinja2&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#summary">Summary&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="recap">Recap&lt;/h2>
&lt;p>This is the first post of the static website development series in which I&amp;rsquo;ll walk over the process of building a static portfolio website. In this post, we will set up our project on our local computer. So let&amp;rsquo;s get to it.&lt;/p>
&lt;h2 id="first-steps">First steps&lt;/h2>
&lt;p>First of all, we will be using &lt;code>python&lt;/code> to create our website. It doesn&amp;rsquo;t matter if you are on Linux, Windows, macOS. As long as you can install and run python scripts, you are good to go.&lt;/p>
&lt;p>I will be using python version 3. I won&amp;rsquo;t go over the process of installing it, but you can follow the instructions from the official &lt;a href="https://www.python.org">python website&lt;/a>. There are numerous tutorials online about installing &lt;code>python3&lt;/code> alongside &lt;code>python2&lt;/code>, be mindful of that.&lt;/p>
&lt;p>You will also need to have &lt;code>pip&lt;/code>, a package manager for python. Since the goal of this series is to make the development workflow as simple as possible, we will not be covering python environments (pipenv, venv, etc).&lt;/p>
&lt;h2 id="project-structure">Project structure&lt;/h2>
&lt;p>The initial structure of the project looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>/&lt;span style="color:#f92672">{&lt;/span>project_source_folder&lt;span style="color:#f92672">}&lt;/span>/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-- _site/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-- templates/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-- build.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-- data.py
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="folder">Folder&lt;/h3>
&lt;p>I want to create a folder on my computer where I want to put everything related to the project in. Everything about the website will be inside this folder, or its subfolders. For example, &lt;code>C:/static_website&lt;/code>.&lt;/p>
&lt;h3 id="buildpy">&lt;code>build.py&lt;/code>&lt;/h3>
&lt;p>The &lt;code>build.py&lt;/code> script will be the one and only script that I will need to execute to generate the final static files.&lt;/p>
&lt;h3 id="datapy">&lt;code>data.py&lt;/code>&lt;/h3>
&lt;p>This file is where we will store our data in an organized way. You will have to put some thought into how you want to structure your data. But as you will see in other videos, it&amp;rsquo;s not a big deal if you need to change it. This file will provide the data to be used in the build script, so not a lotl of logic stuff will go here, only data structures, or more specifically, lists and dictionaries.&lt;/p>
&lt;h3 id="_site">&lt;code>_site/&lt;/code>&lt;/h3>
&lt;p>We will make the &lt;code>build.py&lt;/code> script output, spit out, all the files into this &lt;code>_site/&lt;/code> subfolder. The &lt;code>_site/&lt;/code> folder is what we call the build folder. After running the script, the folder can be used to directly serve the website.&lt;/p>
&lt;h3 id="templates">&lt;code>templates/&lt;/code>&lt;/h3>
&lt;p>The templates folder is where we will have all the &lt;code>html&lt;/code> pages. The templates will be like a blank page, it will have some spaces where you will tell that there should be some information injected into it. Templates are generic, and do not depend on the content. So if you create a new blog post or portifolio project to your website, you do not need to even touch the template files.&lt;/p>
&lt;p>These are the files you will modify in order to make your site prettier, they don&amp;rsquo;t contain any data from the site. The build script will use the data that we will provide, and the template files, and combine both into the final files (save them in the build folder).&lt;/p>
&lt;h3 id="jinja2">Jinja2&lt;/h3>
&lt;p>We will use the &lt;code>jinja2&lt;/code> template engine. It is a python package. In short, it reads a text file that looks very similar to an html file, and fills out some black spaces with the information we pass to it. To install it you can open the bash terminal and use pip:
&lt;code>pip install jinja2&lt;/code>&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>Now that you have the initial (NOT FINAL) setup, we can create the first page. In this post we:&lt;/p>
&lt;ul>
&lt;li>Created a project folder&lt;/li>
&lt;li>Created a build script&lt;/li>
&lt;li>Created a build directory&lt;/li>
&lt;li>Created a template folder&lt;/li>
&lt;li>Created a data store file&lt;/li>
&lt;li>Installed the Jinja2 template engine&lt;/li>
&lt;/ul></content></item><item><title>Static Website Introduction</title><link>/posts/static-website-introduction/</link><pubDate>Tue, 12 Oct 2021 00:00:01 -0500</pubDate><guid>/posts/static-website-introduction/</guid><description>Table of content Table of content Introduction What to expect What is a static website? So why generate static pages for a website? Objective Summary Introduction I decided to write down a series of short(ish) blog posts show how to build a personal website (and host it!) using some common and simple tools. This series is mainly targeted for beginner programmers, but there will be some cool stuff that even advanced ones could benefit from.</description><content>&lt;h2 id="table-of-content">Table of content&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="#table-of-content">Table of content&lt;/a>&lt;/li>
&lt;li>&lt;a href="#introduction">Introduction&lt;/a>&lt;/li>
&lt;li>&lt;a href="#what-to-expect">What to expect&lt;/a>&lt;/li>
&lt;li>&lt;a href="#what-is-a-static-website">What is a static website?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#so-why-generate-static-pages-for-a-website">So why generate static pages for a website?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#objective">Objective&lt;/a>&lt;/li>
&lt;li>&lt;a href="#summary">Summary&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>I decided to write down a series of short(ish) blog posts show how to build a personal website (and host it!) using some common and simple tools. This series is mainly targeted for beginner programmers, but there will be some cool stuff that even advanced ones could benefit from. This will be a long series of posts, feel free to skip back and forth as you wish.&lt;/p>
&lt;p>In this first post I will introduce some basic concepts and layout the motivation.&lt;/p>
&lt;h2 id="what-to-expect">What to expect&lt;/h2>
&lt;p>In this series I will show how to build a static website using &lt;code>python&lt;/code> and &lt;code>html&lt;/code>. It will be very useful if you already have some basic knowledge of both.&lt;/p>
&lt;p>I will show how I created my personal website (an earlier version of it) and hosted it for free on &lt;a href="httpos://github.com">GitHub&lt;/a>. I will also show to automate the development process so it&amp;rsquo;s easier to update it with new projects and content. In a nutshell you will learn how to create a static website generator, and as a bonus it will have a continuous deployment workflow.&lt;/p>
&lt;h2 id="what-is-a-static-website">What is a static website?&lt;/h2>
&lt;p>A static website is one that does not generate it&amp;rsquo;s pages dynamically. For example, you know when you post something on social media and a few seconds later your friends can see it in their own feed the thing you just posted? That is a dynamic website. It requires some powerful servers to run those. You need a database, a webserver.. and probably a ton of other types of tools.&lt;/p>
&lt;p>A static website, on the other hand, is a collection of files that a browser can fetch from a server. It does not change dynamically, if you want it to be updated, you will have to change those files yourself and replace them on the server, manually.&lt;/p>
&lt;p>In this series I will make a static website with SOME level of automation. The pages will be generated offline before being served and not in real time like the social media example.&lt;/p>
&lt;h2 id="so-why-generate-static-pages-for-a-website">So why generate static pages for a website?&lt;/h2>
&lt;p>It may seem counter-intuitive to even consider creating a static website after all these years with so many advanced tools and platforms out there. But I make the point that not all websites need to have a powerful backend and even a proper database. There are many use cases where dynamic content is not required at all, and having static pages gets the message across and saves valuable time that could be used in more meaningful tasks.&lt;/p>
&lt;p>Personal websites are the perfect example. It&amp;rsquo;s a personal website, it&amp;rsquo;s not a full fledged web application. You might have a personal blog on your website, and that&amp;rsquo;s totally cool. But let me ask you, how often do you update a blog? How often do you finish a new project to add to your personal portfolio? For most people, not that often.&lt;/p>
&lt;h2 id="objective">Objective&lt;/h2>
&lt;p>With this series we will learn how to use &lt;code>python&lt;/code> and &lt;code>html&lt;/code> to build a personal website. There are other static website generators out there, such as &lt;a href="https://jekyllrb.com/">Jekyll&lt;/a>, but the purpose of this series is to make your life even easier, without having to learn yet another tool (Jekyll) to create the website. For this workshop, all you need to know is some basic &lt;code>html&lt;/code> and &lt;code>python&lt;/code>. I will use &lt;a href="httpos://github.com">GitHub&lt;/a> to host the files online, and use &lt;del>Travis-CI&lt;/del> &lt;del>CircleCI&lt;/del> &lt;a href="https://github.com/features/actions">GitHub Actions&lt;/a> to simplify the publishing process when you update the website contents.&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>This series targets folks that already have some knowledge of how the web works. You know a little bit of &lt;code>python&lt;/code>, how to create a script, how to load and read text files from a script. I will cover:&lt;/p>
&lt;ul>
&lt;li>Setting up the development environment&lt;/li>
&lt;li>Creating &lt;code>html&lt;/code> templates using &lt;code>Jinja2&lt;/code>&lt;/li>
&lt;li>Create a data store (not data base!)&lt;/li>
&lt;li>Combining templates and data from the store to create pseudo dynamic pages&lt;/li>
&lt;li>Publish the website to GitHub using Actions&lt;/li>
&lt;/ul></content></item></channel></rss>